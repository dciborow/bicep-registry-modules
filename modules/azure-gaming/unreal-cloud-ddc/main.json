{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.16.2.56959",
      "templateHash": "5325097971423290416"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Deployment Location"
      }
    },
    "secondaryLocations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Secondary Deployment Locations"
      }
    },
    "newOrExistingKubernetes": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "New or Existing Kubernentes Resources"
      }
    },
    "aksName": {
      "type": "string",
      "defaultValue": "[format('ddc-storage-{0}', take(uniqueString(resourceGroup().id), 6))]",
      "metadata": {
        "description": "Name of Kubernetes Resource"
      }
    },
    "agentPoolCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of Kubernetes Nodes"
      }
    },
    "agentPoolName": {
      "type": "string",
      "defaultValue": "k8agent",
      "metadata": {
        "description": "Name of Kubernetes Agent Pool"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_L16s_v2",
      "metadata": {
        "description": "Virtual Machine Skew for Kubernetes"
      }
    },
    "hostname": {
      "type": "string",
      "defaultValue": "deploy1.ddc-storage.gaming.azure.com",
      "metadata": {
        "description": "Hostname of Deployment"
      }
    },
    "dnsZoneName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "If not empty, use the given existing DNS Zone for DNS entries and use shortHostname instead of hostname."
      }
    },
    "dnsZoneResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "If dnsZoneName is specified, its resource group must specified as well, since it is not expected to be part of the deployment resource group."
      }
    },
    "shortHostname": {
      "type": "string",
      "defaultValue": "ddc",
      "metadata": {
        "description": "Short hostname of deployment if dnsZoneName is specified"
      }
    },
    "enableCert": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable to configure certificate. Default: true"
      }
    },
    "certificateIssuer": {
      "type": "string",
      "defaultValue": "Self",
      "metadata": {
        "description": "Unknown, Self, or {IssuerName} for certificate signing"
      }
    },
    "issuerProvider": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Certificate Issuer Provider"
      }
    },
    "assignRole": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Running this template requires roleAssignment permission on the Resource Group, which require an Owner role. Set this to false to deploy some of the resources"
      }
    },
    "isZoneRedundant": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Zonal Redunancy for supported regions"
      }
    },
    "newOrExistingStorageAccount": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Create new or use existing Storage Account."
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[format('ddc{0}', uniqueString(resourceGroup().id, subscription().subscriptionId))]",
      "metadata": {
        "description": "Name of Storage Account resource"
      }
    },
    "storageResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of Storage Account Resource Group"
      }
    },
    "newOrExistingKeyVault": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Create new or use existing Key Vault"
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "[take(format('ddcKeyVault{0}', uniqueString(resourceGroup().id, subscription().subscriptionId, parameters('location'))), 24)]",
      "metadata": {
        "description": "Name of Key Vault resource"
      }
    },
    "newOrExistingPublicIp": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Create new or use existing Public IP resource"
      }
    },
    "publicIpName": {
      "type": "string",
      "defaultValue": "[format('ddcPublicIP{0}', uniqueString(resourceGroup().id, subscription().subscriptionId))]",
      "metadata": {
        "description": "Name of Public IP Resource"
      }
    },
    "newOrExistingTrafficManager": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Create new or use existing Traffic Manager Profile."
      }
    },
    "trafficManagerName": {
      "type": "string",
      "defaultValue": "[format('traffic-mp-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "New or existing Traffic Manager Profile."
      }
    },
    "trafficManagerDnsName": {
      "type": "string",
      "defaultValue": "[format('tmp-{0}', uniqueString(resourceGroup().id, subscription().id))]",
      "metadata": {
        "description": "Relative DNS name for the traffic manager profile, must be globally unique."
      }
    },
    "newOrExistingCosmosDB": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Create new or use existing CosmosDB for Cassandra."
      }
    },
    "cosmosDBName": {
      "type": "string",
      "defaultValue": "[format('ddc-db-{0}', uniqueString(resourceGroup().id, subscription().subscriptionId))]",
      "metadata": {
        "description": "Name of Cosmos DB resource."
      }
    },
    "cosmosDBRG": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of Cosmos DB Resource Group."
      }
    },
    "servicePrincipalClientID": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Application Managed Identity ID"
      }
    },
    "workerServicePrincipalClientID": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Worker Managed Identity ID, required for geo-replication."
      }
    },
    "workerServicePrincipalSecret": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Worker Managed Identity Secret, which will be stored in Key Vault, and is required for geo-replication."
      }
    },
    "certificateName": {
      "type": "string",
      "defaultValue": "unreal-cloud-ddc-cert",
      "metadata": {
        "description": "Name of Certificate (Default certificate is self-signed)"
      }
    },
    "epicEULA": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Set to true to agree to the terms and conditions of the Epic Games EULA found here: https://store.epicgames.com/en-US/eula"
      }
    },
    "azureTenantID": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Active Directory Tennat ID"
      }
    },
    "keyVaultTenantID": {
      "type": "string",
      "defaultValue": "[parameters('azureTenantID')]",
      "metadata": {
        "description": "Tenant ID for Key Vault"
      }
    },
    "loginTenantID": {
      "type": "string",
      "defaultValue": "[parameters('azureTenantID')]",
      "metadata": {
        "description": "Tenant ID for Authentication"
      }
    },
    "CleanOldRefRecords": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Delete old ref records no longer in use across the entire system"
      }
    },
    "CleanOldBlobs": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Delete old blobs that are no longer referenced by any ref - this runs in each region to cleanup that regions blob stores"
      }
    },
    "cassandraConnectionString": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Connection String of User Provided Cassandra Database"
      }
    },
    "storageConnectionStrings": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Connection Strings of User Provided Storage Accounts"
      }
    },
    "imageVersion": {
      "type": "string",
      "defaultValue": "0.38.1",
      "metadata": {
        "description": "Version of the image to deploy"
      }
    },
    "helmChart": {
      "type": "string",
      "metadata": {
        "description": "Name of the Helm chart to deploy"
      }
    },
    "helmVersion": {
      "type": "string",
      "defaultValue": "0.2.3",
      "metadata": {
        "description": "Helm Chart Version"
      }
    },
    "helmName": {
      "type": "string",
      "defaultValue": "myhordetest",
      "metadata": {
        "description": "Name of the Helm release"
      }
    },
    "helmNamespace": {
      "type": "string",
      "defaultValue": "horde-tests",
      "metadata": {
        "description": "Namespace of the Helm release"
      }
    },
    "siteName": {
      "type": "string",
      "defaultValue": "[format('ddc-{0}', parameters('location'))]",
      "metadata": {
        "description": "Name of the site"
      }
    },
    "managedIdentityPrefix": {
      "type": "string",
      "defaultValue": "id-ddc-storage-",
      "metadata": {
        "description": "Prefix of Managed Identity used during deployment"
      }
    },
    "useExistingManagedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Does the Managed Identity already exists, or should be created"
      }
    },
    "existingManagedIdentitySubId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "For an existing Managed Identity, the Subscription Id it is located in"
      }
    },
    "existingManagedIdentityResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "For an existing Managed Identity, the Resource Group it is located in"
      }
    },
    "isApp": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Set to false to deploy from as an ARM template for debugging"
      }
    },
    "keyVaultTags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Set tags to apply to Key Vault resources"
      }
    },
    "namespacesToReplicate": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Array of ddc namespaces to replicate if there are secondary regions"
      }
    },
    "newOrExistingWorkspaceForContainerInsights": {
      "type": "string",
      "defaultValue": "none",
      "allowedValues": [
        "new",
        "existing",
        "none"
      ],
      "metadata": {
        "description": "If new or existing, this will enable container insights on the AKS cluster. If new, will create one log analytics workspace per location"
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "defaultValue": "[format('law-ddc-{0}', uniqueString(resourceGroup().id, subscription().subscriptionId))]",
      "metadata": {
        "description": "The name of the log analytics workspace to use for container insights"
      }
    },
    "existingLogAnalyticsWorkspaceResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The resource group corresponding to an existing logAnalyticsWorkspaceName"
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "sourceLocations",
        "count": "[length(variables('allLocations'))]",
        "input": "[if(greater(copyIndex('sourceLocations'), 0), variables('allLocations')[sub(copyIndex('sourceLocations'), 1)], variables('allLocations')[variables('lastLocationIndex')])]"
      },
      {
        "name": "locationSpecs",
        "count": "[length(variables('allLocations'))]",
        "input": {
          "location": "[variables('allLocations')[copyIndex('locationSpecs')]]",
          "sourceLocation": "[variables('sourceLocations')[copyIndex('locationSpecs')]]",
          "locationCertName": "[format('{0}-{1}', parameters('certificateName'), variables('allLocations')[copyIndex('locationSpecs')])]",
          "fullLocationHostName": "[format('{0}.{1}', variables('allLocations')[copyIndex('locationSpecs')], variables('fullHostname'))]",
          "fullSourceLocationHostName": "[format('{0}.{1}', variables('sourceLocations')[copyIndex('locationSpecs')], variables('fullHostname'))]"
        }
      }
    ],
    "nodeLabels": "horde-storage",
    "useDnsZone": "[and(not(equals(parameters('dnsZoneName'), '')), not(equals(parameters('dnsZoneResourceGroupName'), '')))]",
    "fullHostname": "[if(variables('useDnsZone'), format('{0}.{1}', parameters('shortHostname'), parameters('dnsZoneName')), parameters('hostname'))]",
    "newOrExisting": {
      "new": "new",
      "existing": "existing"
    },
    "enableTrafficManager": "[not(equals(parameters('newOrExistingTrafficManager'), 'none'))]",
    "enableContainerInsights": "[not(equals(parameters('newOrExistingWorkspaceForContainerInsights'), 'none'))]",
    "allLocations": "[concat(createArray(parameters('location')), parameters('secondaryLocations'))]",
    "lastLocationIndex": "[sub(length(variables('allLocations')), 1)]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "pid-7837dd60-4ba8-419a-a26f-237bbe170773-partnercenter",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "condition": "[variables('enableTrafficManager')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('trafficManager-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('trafficManagerName')]"
          },
          "newOrExisting": {
            "value": "[parameters('newOrExistingTrafficManager')]"
          },
          "trafficManagerDnsName": {
            "value": "[parameters('trafficManagerDnsName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.2.56959",
              "templateHash": "13338778160602260380"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "[format('traffic-mp-{0}', uniqueString(resourceGroup().id, subscription().id))]",
              "metadata": {
                "description": "Traffic Manager Profile Resource Name"
              }
            },
            "trafficManagerDnsName": {
              "type": "string",
              "defaultValue": "[format('tmp-{0}', uniqueString(resourceGroup().id, subscription().id))]",
              "metadata": {
                "description": "Relative DNS name for the traffic manager profile, must be globally unique."
              }
            },
            "newOrExisting": {
              "type": "string",
              "defaultValue": "new",
              "allowedValues": [
                "new",
                "existing"
              ]
            },
            "monitorConfig": {
              "type": "object",
              "defaultValue": {
                "protocol": "HTTPS",
                "port": 443,
                "path": "/",
                "expectedStatusCodeRanges": [
                  {
                    "min": 200,
                    "max": 202
                  },
                  {
                    "min": 301,
                    "max": 302
                  }
                ]
              }
            }
          },
          "resources": [
            {
              "condition": "[equals(parameters('newOrExisting'), 'new')]",
              "type": "Microsoft.Network/trafficmanagerprofiles",
              "apiVersion": "2018-08-01",
              "name": "[parameters('name')]",
              "location": "global",
              "properties": {
                "profileStatus": "Enabled",
                "trafficRoutingMethod": "Performance",
                "dnsConfig": {
                  "relativeName": "[toLower(parameters('trafficManagerDnsName'))]",
                  "ttl": 30
                },
                "monitorConfig": {
                  "protocol": "[if(contains(parameters('monitorConfig'), 'protocol'), parameters('monitorConfig').protocol, 'HTTPS')]",
                  "port": "[if(contains(parameters('monitorConfig'), 'port'), parameters('monitorConfig').port, 443)]",
                  "path": "[if(contains(parameters('monitorConfig'), 'path'), parameters('monitorConfig').path, '/')]",
                  "expectedStatusCodeRanges": "[if(contains(parameters('monitorConfig'), 'expectedStatusCodeRanges'), parameters('monitorConfig').expectedStatusCodeRanges, createArray(createObject('min', 200, 'max', 202), createObject('min', 301, 'max', 302)))]"
                }
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/trafficmanagerprofiles', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "fqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/trafficmanagerprofiles', parameters('name')), '2018-08-01').dnsConfig.fqdn]"
            }
          }
        }
      }
    },
    {
      "condition": "[variables('enableContainerInsights')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('logAnalytics-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "workspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "newOrExistingWorkspace": {
            "value": "[variables('newOrExisting')[parameters('newOrExistingWorkspaceForContainerInsights')]]"
          },
          "existingLogAnalyticsWorkspaceResourceGroupName": {
            "value": "[parameters('existingLogAnalyticsWorkspaceResourceGroupName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.2.56959",
              "templateHash": "15175776353107122013"
            }
          },
          "parameters": {
            "workspaceName": {
              "type": "string",
              "metadata": {
                "description": "Specify the name of the workspace."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Specify the location for the workspace."
              }
            },
            "newOrExistingWorkspace": {
              "type": "string",
              "defaultValue": "new",
              "allowedValues": [
                "new",
                "existing"
              ],
              "metadata": {
                "description": "Create new or use existing workspace"
              }
            },
            "existingLogAnalyticsWorkspaceResourceGroupName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The resource group containing an existing logAnalyticsWorkspaceName"
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "PerGB2018",
              "allowedValues": [
                "CapacityReservation",
                "Free",
                "LACluster",
                "PerGB2018",
                "PerNode",
                "Premium",
                "Standalone",
                "Standard"
              ],
              "metadata": {
                "description": "Specify the pricing tier: PerGB2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium) which are not available to all customers."
              }
            },
            "retentionInDays": {
              "type": "int",
              "defaultValue": 30,
              "metadata": {
                "description": "Specify the number of days to retain data."
              }
            },
            "resourcePermissions": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Specify true to use resource or workspace permissions, or false to require workspace permissions."
              }
            }
          },
          "variables": {
            "newWorkspace": "[equals(parameters('newOrExistingWorkspace'), 'new')]"
          },
          "resources": [
            {
              "condition": "[variables('newWorkspace')]",
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-12-01-preview",
              "name": "[parameters('workspaceName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "name": "[parameters('sku')]"
                },
                "retentionInDays": "[parameters('retentionInDays')]",
                "features": {
                  "enableLogAccessUsingOnlyResourcePermissions": "[parameters('resourcePermissions')]"
                }
              }
            }
          ],
          "outputs": {
            "workspaceId": {
              "type": "string",
              "value": "[if(variables('newWorkspace'), resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingLogAnalyticsWorkspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName')))]"
            }
          }
        }
      }
    },
    {
      "copy": {
        "name": "allRegionalResources",
        "count": "[length(variables('allLocations'))]"
      },
      "condition": "[parameters('epicEULA')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[guid(parameters('keyVaultName'), parameters('publicIpName'), parameters('cosmosDBName'), parameters('storageAccountName'), variables('allLocations')[copyIndex()])]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[variables('allLocations')[copyIndex()]]"
          },
          "newOrExistingKubernetes": {
            "value": "[parameters('newOrExistingKubernetes')]"
          },
          "newOrExistingKeyVault": {
            "value": "[parameters('newOrExistingKeyVault')]"
          },
          "newOrExistingPublicIp": {
            "value": "[parameters('newOrExistingPublicIp')]"
          },
          "newOrExistingStorageAccount": {
            "value": "[parameters('newOrExistingStorageAccount')]"
          },
          "kubernetesParams": {
            "value": {
              "name": "[format('{0}-{1}', parameters('aksName'), take(variables('allLocations')[copyIndex()], 8))]",
              "agentPoolCount": "[parameters('agentPoolCount')]",
              "agentPoolName": "[parameters('agentPoolName')]",
              "vmSize": "[parameters('vmSize')]",
              "clusterUserName": "[format('id-{0}-{1}', parameters('aksName'), variables('allLocations')[copyIndex()])]",
              "nodeLabels": "[variables('nodeLabels')]"
            }
          },
          "keyVaultName": {
            "value": "[take(format('{0}-{1}', variables('allLocations')[copyIndex()], parameters('keyVaultName')), 24)]"
          },
          "keyVaultTags": {
            "value": "[parameters('keyVaultTags')]"
          },
          "publicIpName": {
            "value": "[format('{0}-{1}', parameters('publicIpName'), variables('allLocations')[copyIndex()])]"
          },
          "trafficManagerNameForEndpoints": "[if(variables('enableTrafficManager'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', format('trafficManager-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))), '2022-09-01').outputs.name.value), createObject('value', ''))]",
          "storageAccountName": {
            "value": "[format('{0}{1}', take(variables('allLocations')[copyIndex()], 8), parameters('storageAccountName'))]"
          },
          "storageResourceGroupName": {
            "value": "[parameters('storageResourceGroupName')]"
          },
          "storageSecretName": {
            "value": "ddc-storage-connection-string"
          },
          "assignRole": {
            "value": "[parameters('assignRole')]"
          },
          "isZoneRedundant": {
            "value": "[parameters('isZoneRedundant')]"
          },
          "subject": {
            "value": "system:serviceaccount:horde-tests:workload-identity-sa"
          },
          "storageAccountSecret": "[if(equals(parameters('newOrExistingStorageAccount'), 'existing'), createObject('value', parameters('storageConnectionStrings')[copyIndex()]), createObject('value', ''))]",
          "useDnsZone": {
            "value": "[variables('useDnsZone')]"
          },
          "dnsZoneName": {
            "value": "[parameters('dnsZoneName')]"
          },
          "dnsZoneResourceGroupName": {
            "value": "[parameters('dnsZoneResourceGroupName')]"
          },
          "dnsRecordNameSuffix": {
            "value": "[parameters('shortHostname')]"
          },
          "logAnalyticsWorkspaceResourceId": "[if(variables('enableContainerInsights'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', format('logAnalytics-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))), '2022-09-01').outputs.workspaceId.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.2.56959",
              "templateHash": "3639380754216672815"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Deployment Location"
              }
            },
            "isZoneRedundant": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Toggle to enable or disable zone redudance."
              }
            },
            "newOrExistingStorageAccount": {
              "type": "string",
              "defaultValue": "none",
              "allowedValues": [
                "new",
                "existing",
                "none"
              ]
            },
            "storageAccountName": {
              "type": "string",
              "defaultValue": "[format('store{0}', uniqueString(resourceGroup().id, subscription().id))]"
            },
            "storageResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]"
            },
            "newOrExistingKeyVault": {
              "type": "string",
              "defaultValue": "none",
              "allowedValues": [
                "new",
                "existing",
                "none"
              ]
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": "[format('keyVault{0}', uniqueString(resourceGroup().id, subscription().id))]"
            },
            "keyVaultTags": {
              "type": "object",
              "defaultValue": {}
            },
            "newOrExistingPublicIp": {
              "type": "string",
              "defaultValue": "none",
              "allowedValues": [
                "new",
                "existing",
                "none"
              ]
            },
            "publicIpName": {
              "type": "string",
              "defaultValue": "[format('pubip{0}', uniqueString(resourceGroup().id, subscription().id))]"
            },
            "trafficManagerNameForEndpoints": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Existing traffic manager name to add endpoints to. Leave empty to skip endpoints"
              }
            },
            "newOrExistingKubernetes": {
              "type": "string",
              "defaultValue": "none",
              "allowedValues": [
                "new",
                "existing",
                "none"
              ]
            },
            "kubernetesParams": {
              "type": "object",
              "defaultValue": {
                "name": "[format('aks-{0}', uniqueString(resourceGroup().id))]",
                "agentPoolCount": 3,
                "agentPoolName": "agentpool",
                "vmSize": "Standard_D2_v2",
                "assignRole": true,
                "clusterUserName": "[format('k8-{0}', take(uniqueString(parameters('location'), resourceGroup().id), 15))]",
                "nodeLabels": "defaultLabel"
              }
            },
            "assignRole": {
              "type": "bool",
              "defaultValue": true
            },
            "subject": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Subject for AKS Federated Credential"
              }
            },
            "storageSecretName": {
              "type": "string",
              "defaultValue": ""
            },
            "storageAccountSecret": {
              "type": "securestring",
              "defaultValue": ""
            },
            "useDnsZone": {
              "type": "bool",
              "defaultValue": false
            },
            "dnsZoneName": {
              "type": "string",
              "defaultValue": ""
            },
            "dnsZoneResourceGroupName": {
              "type": "string",
              "defaultValue": ""
            },
            "dnsRecordNameSuffix": {
              "type": "string",
              "defaultValue": ""
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "newOrExisting": {
              "new": "new",
              "existing": "existing"
            },
            "enableKubernetes": "[not(equals(parameters('newOrExistingKubernetes'), 'none'))]",
            "enableKeyVault": "[not(equals(parameters('newOrExistingKeyVault'), 'none'))]",
            "enableStorage": "[not(equals(parameters('newOrExistingStorageAccount'), 'none'))]",
            "enablePublicIP": "[not(equals(parameters('newOrExistingPublicIp'), 'none'))]",
            "enableTrafficManager": "[not(equals(parameters('trafficManagerNameForEndpoints'), ''))]",
            "noAvailabilityZones": [
              "northcentralus",
              "westus",
              "jioindiawest",
              "westcentralus",
              "australiacentral",
              "australiacentral2",
              "australiasoutheast",
              "japanwest",
              "jioindiacentral",
              "koreasouth",
              "southindia",
              "francesouth",
              "germanynorth",
              "norwayeast",
              "switzerlandwest",
              "ukwest",
              "uaecentral",
              "brazilsoutheast"
            ],
            "clusterName": "[if(contains(parameters('kubernetesParams'), 'name'), parameters('kubernetesParams').name, format('aks-{0}', uniqueString(resourceGroup().id)))]"
          },
          "resources": [
            {
              "condition": "[variables('enableKubernetes')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('create_cluster-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('clusterName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "agentPoolCount": "[if(contains(parameters('kubernetesParams'), 'agentPoolCount'), createObject('value', parameters('kubernetesParams').agentPoolCount), createObject('value', 3))]",
                  "agentPoolName": "[if(contains(parameters('kubernetesParams'), 'agentPoolName'), createObject('value', parameters('kubernetesParams').agentPoolName), createObject('value', 'agentpool'))]",
                  "vmSize": "[if(contains(parameters('kubernetesParams'), 'vmSize'), createObject('value', parameters('kubernetesParams').vmSize), createObject('value', 'Standard_D2_v2'))]",
                  "assignRole": {
                    "value": "[parameters('assignRole')]"
                  },
                  "newOrExisting": {
                    "value": "[variables('newOrExisting')[parameters('newOrExistingKubernetes')]]"
                  },
                  "isZoneRedundant": {
                    "value": "[and(parameters('isZoneRedundant'), not(contains(variables('noAvailabilityZones'), parameters('location'))))]"
                  },
                  "subject": {
                    "value": "[parameters('subject')]"
                  },
                  "clusterUserName": {
                    "value": "[parameters('kubernetesParams').clusterUserName]"
                  },
                  "nodeLabels": {
                    "value": "[parameters('kubernetesParams').nodeLabels]"
                  },
                  "workspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "8774908260606061917"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Deployment Location"
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "ucddc-storage-k8-cluster"
                    },
                    "agentPoolCount": {
                      "type": "int",
                      "defaultValue": 3
                    },
                    "agentPoolName": {
                      "type": "string",
                      "defaultValue": "k8agent"
                    },
                    "vmSize": {
                      "type": "string",
                      "defaultValue": "Standard_L16s_v2"
                    },
                    "nodeLabels": {
                      "type": "string",
                      "defaultValue": "defaultLabel"
                    },
                    "assignRole": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "dnsPrefix": {
                      "type": "string",
                      "defaultValue": "[format('k8-{0}', take(uniqueString(parameters('name')), 5))]"
                    },
                    "kubernetesVersion": {
                      "type": "string",
                      "defaultValue": "1.24.9"
                    },
                    "availabilityZones": {
                      "type": "array",
                      "defaultValue": [
                        "1",
                        "2",
                        "3"
                      ]
                    },
                    "newOrExisting": {
                      "type": "string",
                      "defaultValue": "new",
                      "allowedValues": [
                        "new",
                        "existing"
                      ]
                    },
                    "isZoneRedundant": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Toggle to enable or disable zone redudance."
                      }
                    },
                    "subject": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Subject for Federated Credential. Ex: system:serviceaccount:ucddc-tests:workload-identity-sa"
                      }
                    },
                    "clusterUserName": {
                      "type": "string",
                      "defaultValue": "[format('k8-{0}', take(uniqueString(parameters('location'), parameters('name')), 15))]"
                    },
                    "workspaceResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Azure Monitor Log Analytics Resource ID. Leave empty to disable container insights"
                      }
                    }
                  },
                  "variables": {
                    "addonProfiles": "[if(equals(parameters('workspaceResourceId'), ''), createObject('omsagent', createObject('enabled', false(), 'config', createObject())), createObject('omsagent', createObject('enabled', true(), 'config', createObject('logAnalyticsWorkspaceResourceID', parameters('workspaceResourceId')))))]"
                  },
                  "resources": [
                    {
                      "condition": "[equals(parameters('newOrExisting'), 'new')]",
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2018-11-30",
                      "name": "[parameters('clusterUserName')]",
                      "location": "[parameters('location')]"
                    },
                    {
                      "condition": "[equals(parameters('newOrExisting'), 'new')]",
                      "type": "Microsoft.ContainerService/managedClusters",
                      "apiVersion": "2022-07-02-preview",
                      "name": "[take(parameters('name'), 80)]",
                      "location": "[parameters('location')]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('clusterUserName')))]": {}
                        }
                      },
                      "properties": {
                        "kubernetesVersion": "[parameters('kubernetesVersion')]",
                        "oidcIssuerProfile": {
                          "enabled": true
                        },
                        "dnsPrefix": "[parameters('dnsPrefix')]",
                        "enableRBAC": true,
                        "agentPoolProfiles": [
                          {
                            "name": "[parameters('agentPoolName')]",
                            "count": "[parameters('agentPoolCount')]",
                            "vmSize": "[parameters('vmSize')]",
                            "osType": "Linux",
                            "mode": "System",
                            "nodeLabels": {
                              "type": "[parameters('nodeLabels')]"
                            },
                            "availabilityZones": "[if(parameters('isZoneRedundant'), parameters('availabilityZones'), null())]"
                          }
                        ],
                        "identityProfile": {
                          "assignedIdentity": {
                            "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('clusterUserName')), '2018-11-30').clientId]",
                            "resourceId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('clusterUserName'))]",
                            "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('clusterUserName')), '2018-11-30').principalId]"
                          },
                          "kubeletAssignedIdentity": {
                            "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('clusterUserName')), '2018-11-30').clientId]",
                            "resourceId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('clusterUserName'))]",
                            "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('clusterUserName')), '2018-11-30').principalId]"
                          }
                        },
                        "addonProfiles": "[variables('addonProfiles')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('clusterUserName'))]"
                      ]
                    },
                    {
                      "condition": "[and(equals(parameters('newOrExisting'), 'new'), not(equals(parameters('subject'), '')))]",
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
                      "apiVersion": "2022-01-31-preview",
                      "name": "[format('{0}/{1}', parameters('clusterUserName'), format('federated-k8-{0}', take(uniqueString(parameters('location'), parameters('name')), 15)))]",
                      "properties": {
                        "audiences": [
                          "api://AzureADTokenExchange"
                        ],
                        "issuer": "[reference(resourceId('Microsoft.ContainerService/managedClusters', take(parameters('name'), 80)), '2022-07-02-preview').oidcIssuerProfile.issuerURL]",
                        "subject": "[parameters('subject')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerService/managedClusters', take(parameters('name'), 80))]",
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('clusterUserName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('assignRole')]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "name": "[guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('clusterUserName')), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7'))]",
                      "properties": {
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('clusterUserName')), '2018-11-30').principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('clusterUserName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "nodeResourceGroup": {
                      "type": "string",
                      "value": "[if(equals(parameters('newOrExisting'), 'new'), reference(resourceId('Microsoft.ContainerService/managedClusters', take(parameters('name'), 80)), '2022-07-02-preview').nodeResourceGroup, reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('name')), '2021-03-01').nodeResourceGroup)]"
                    },
                    "clusterUserObjectId": {
                      "type": "string",
                      "value": "[if(equals(parameters('newOrExisting'), 'new'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('clusterUserName')), '2018-11-30').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('k8-{0}', take(uniqueString(parameters('location'), parameters('name')), 15))), '2018-11-30').principalId)]"
                    },
                    "clusterUrl": {
                      "type": "string",
                      "value": "[if(equals(parameters('newOrExisting'), 'new'), reference(resourceId('Microsoft.ContainerService/managedClusters', take(parameters('name'), 80)), '2022-07-02-preview').fqdn, reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('name')), '2021-03-01').fqdn)]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[variables('enableKeyVault')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('keyVault-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[parameters('keyVaultName')]"
                  },
                  "newOrExisting": {
                    "value": "[variables('newOrExisting')[parameters('newOrExistingKeyVault')]]"
                  },
                  "tags": {
                    "value": "[parameters('keyVaultTags')]"
                  },
                  "rbacPolicies": {
                    "value": [
                      "[if(variables('enableKubernetes'), createObject('objectId', reference(resourceId('Microsoft.Resources/deployments', format('create_cluster-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))), '2022-09-01').outputs.clusterUserObjectId.value), createObject())]"
                    ]
                  },
                  "assignRole": {
                    "value": "[parameters('assignRole')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "14926005274998103618"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Deployment Location"
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('keyvault-{0}', uniqueString(resourceGroup().id))]"
                    },
                    "subnetID": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "tenantId": {
                      "type": "string",
                      "defaultValue": "[subscription().tenantId]"
                    },
                    "enableVNet": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "rbacPolicies": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "newOrExisting": {
                      "type": "string",
                      "defaultValue": "new",
                      "allowedValues": [
                        "new",
                        "existing"
                      ]
                    },
                    "assignRole": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "variables": {
                    "rbacSecretsReaderRole": "4633458b-17de-408a-b874-0445c86b69e6",
                    "rbacCertificateOfficerRole": "a4417e6f-fecd-4de8-b567-7b0420556985",
                    "networkAcls": "[if(parameters('enableVNet'), createObject('defaultAction', 'Deny', 'virtualNetworkRules', createArray(createObject('action', 'Allow', 'id', parameters('subnetID')))), createObject())]"
                  },
                  "resources": [
                    {
                      "condition": "[equals(parameters('newOrExisting'), 'new')]",
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[take(parameters('name'), 24)]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "enableSoftDelete": true,
                        "softDeleteRetentionInDays": 7,
                        "sku": {
                          "family": "A",
                          "name": "standard"
                        },
                        "enableRbacAuthorization": true,
                        "tenantId": "[parameters('tenantId')]",
                        "networkAcls": "[variables('networkAcls')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "identityRoleAssignDeployment",
                        "count": "[length(parameters('rbacPolicies'))]"
                      },
                      "condition": "[parameters('assignRole')]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', take(parameters('name'), 24))]",
                      "name": "[guid(resourceId('Microsoft.KeyVault/vaults', take(parameters('name'), 24)), variables('rbacSecretsReaderRole'), parameters('rbacPolicies')[copyIndex()].objectId)]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('rbacSecretsReaderRole'))]",
                        "principalId": "[parameters('rbacPolicies')[copyIndex()].objectId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', take(parameters('name'), 24))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "rbacCertsReader",
                        "count": "[length(parameters('rbacPolicies'))]"
                      },
                      "condition": "[parameters('assignRole')]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', take(parameters('name'), 24))]",
                      "name": "[guid(resourceId('Microsoft.KeyVault/vaults', take(parameters('name'), 24)), variables('rbacCertificateOfficerRole'), parameters('rbacPolicies')[copyIndex()].objectId)]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('rbacCertificateOfficerRole'))]",
                        "principalId": "[parameters('rbacPolicies')[copyIndex()].objectId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', take(parameters('name'), 24))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "Key Vault Id"
                      },
                      "value": "[if(equals(parameters('newOrExisting'), 'new'), resourceId('Microsoft.KeyVault/vaults', take(parameters('name'), 24)), resourceId('Microsoft.KeyVault/vaults', parameters('name')))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Key Vault Name"
                      },
                      "value": "[if(equals(parameters('newOrExisting'), 'new'), take(parameters('name'), 24), parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('create_cluster-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name)))]"
              ]
            },
            {
              "condition": "[variables('enableStorage')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('storageAccount-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[take(parameters('storageAccountName'), 24)]"
                  },
                  "newOrExisting": {
                    "value": "[variables('newOrExisting')[parameters('newOrExistingStorageAccount')]]"
                  },
                  "resourceGroupName": {
                    "value": "[parameters('storageResourceGroupName')]"
                  },
                  "isZoneRedundant": {
                    "value": "[and(parameters('isZoneRedundant'), not(contains(variables('noAvailabilityZones'), parameters('location'))))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "16521986576556249549"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Deployment Location"
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "[uniqueString(resourceGroup().id)]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]"
                    },
                    "newOrExisting": {
                      "type": "string",
                      "defaultValue": "new",
                      "allowedValues": [
                        "new",
                        "existing"
                      ]
                    },
                    "subnetID": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "enableVNET": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "isZoneRedundant": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Toggle to enable or disable zone redudance."
                      }
                    },
                    "storageAccountTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "metadata": {
                        "description": "Storage Account Tier. Standard or Premium."
                      },
                      "allowedValues": [
                        "Standard",
                        "Premium"
                      ]
                    },
                    "storageAccountType": {
                      "type": "string",
                      "defaultValue": "[if(parameters('isZoneRedundant'), format('{0}_ZRS', parameters('storageAccountTier')), format('{0}_LRS', parameters('storageAccountTier')))]",
                      "metadata": {
                        "description": "Storage Account Type. Use Zonal Redundant Storage when able."
                      }
                    }
                  },
                  "variables": {
                    "networkAcls": "[if(parameters('enableVNET'), createObject('defaultAction', 'Deny', 'virtualNetworkRules', createArray(createObject('action', 'Allow', 'id', parameters('subnetID')))), createObject())]"
                  },
                  "resources": [
                    {
                      "condition": "[equals(parameters('newOrExisting'), 'new')]",
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('storageAccountType')]"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "encryption": {
                          "keySource": "Microsoft.Storage",
                          "services": {
                            "blob": {
                              "enabled": true
                            },
                            "file": {
                              "enabled": true
                            }
                          }
                        },
                        "supportsHttpsTrafficOnly": true,
                        "allowBlobPublicAccess": false,
                        "networkAcls": "[variables('networkAcls')]",
                        "minimumTlsVersion": "TLS1_2"
                      }
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('name'))]"
                    },
                    "blobStorageConnectionString": {
                      "type": "string",
                      "value": "[if(equals(parameters('newOrExisting'), 'new'), format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('name'), environment().suffixes.storage, listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('name')), '2022-05-01').keys[0].value), '')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[parameters('resourceGroupName')]"
                    },
                    "apiVersion": {
                      "type": "string",
                      "value": "2022-05-01"
                    }
                  }
                }
              }
            },
            {
              "condition": "[variables('enablePublicIP')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('publicIp-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[parameters('publicIpName')]"
                  },
                  "newOrExisting": {
                    "value": "[variables('newOrExisting')[parameters('newOrExistingPublicIp')]]"
                  },
                  "useDnsZone": {
                    "value": "[parameters('useDnsZone')]"
                  },
                  "dnsZoneName": {
                    "value": "[parameters('dnsZoneName')]"
                  },
                  "dnsZoneResourceGroupName": {
                    "value": "[parameters('dnsZoneResourceGroupName')]"
                  },
                  "dnsRecordNameSuffix": {
                    "value": "[parameters('dnsRecordNameSuffix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "2262670902328618504"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Deployment Location"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Resource Group Name"
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('pubip{0}', uniqueString(resourceGroup().id))]",
                      "metadata": {
                        "description": "PublicIP Resource Name"
                      }
                    },
                    "useDnsZone": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "If this is true, dnsZoneName, etc. should be specified"
                      }
                    },
                    "dnsZoneName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "dnsZoneResourceGroupName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "dnsRecordNameSuffix": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "newOrExisting": {
                      "type": "string",
                      "defaultValue": "new",
                      "metadata": {
                        "description": "Create new or use existing resource selection. new/existing"
                      },
                      "allowedValues": [
                        "new",
                        "existing"
                      ]
                    },
                    "publicIpSku": {
                      "type": "object",
                      "defaultValue": {
                        "name": "Standard",
                        "tier": "Regional"
                      }
                    },
                    "publicIpAllocationMethod": {
                      "type": "string",
                      "defaultValue": "Static"
                    },
                    "publicIpDns": {
                      "type": "string",
                      "defaultValue": "[format('dns-{0}', uniqueString(resourceGroup().id, parameters('name')))]"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[equals(parameters('newOrExisting'), 'new')]",
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-03-01",
                      "name": "[parameters('name')]",
                      "sku": "[parameters('publicIpSku')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publicIPAllocationMethod": "[parameters('publicIpAllocationMethod')]",
                        "dnsSettings": {
                          "domainNameLabel": "[toLower(parameters('publicIpDns'))]"
                        }
                      }
                    },
                    {
                      "condition": "[parameters('useDnsZone')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('dns-ip-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))]",
                      "resourceGroup": "[parameters('dnsZoneResourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "dnsZoneName": {
                            "value": "[parameters('dnsZoneName')]"
                          },
                          "recordName": {
                            "value": "[format('{0}.{1}', parameters('location'), parameters('dnsRecordNameSuffix'))]"
                          },
                          "ipAddress": "[if(equals(parameters('newOrExisting'), 'new'), createObject('value', reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-03-01').ipAddress), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Network/publicIPAddresses', parameters('name')), '2021-03-01').ipAddress))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.16.2.56959",
                              "templateHash": "8242777620503298756"
                            }
                          },
                          "parameters": {
                            "dnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "An existing DNS Zone resource name"
                              }
                            },
                            "recordName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of A record to add to dnsZoneName"
                              }
                            },
                            "ipAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "IP Address to add as A record"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/dnsZones/A",
                              "apiVersion": "2018-05-01",
                              "name": "[format('{0}/{1}', parameters('dnsZoneName'), parameters('recordName'))]",
                              "properties": {
                                "TTL": 3600,
                                "ARecords": [
                                  {
                                    "ipv4Address": "[parameters('ipAddress')]"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[if(equals(parameters('newOrExisting'), 'new'), parameters('name'), parameters('name'))]"
                    },
                    "id": {
                      "type": "string",
                      "value": "[if(equals(parameters('newOrExisting'), 'new'), resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Network/publicIPAddresses', parameters('name')))]"
                    },
                    "ipAddress": {
                      "type": "string",
                      "value": "[if(equals(parameters('newOrExisting'), 'new'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-03-01').ipAddress, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Network/publicIPAddresses', parameters('name')), '2021-03-01').ipAddress)]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[variables('enableTrafficManager')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('trafficManagerEndpoint-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "trafficManagerName": {
                    "value": "[parameters('trafficManagerNameForEndpoints')]"
                  },
                  "endpoints": {
                    "value": [
                      "[if(variables('enablePublicIP'), createObject('name', format('publicip{0}', parameters('location')), 'target', reference(resourceId('Microsoft.Resources/deployments', format('publicIp-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))), '2022-09-01').outputs.ipAddress.value, 'endpointStatus', 'Enabled', 'endpointLocation', parameters('location')), createObject())]"
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "16075534495230749274"
                    }
                  },
                  "parameters": {
                    "trafficManagerName": {
                      "type": "string",
                      "metadata": {
                        "description": "Existing Traffic Manager Profile Resource Name"
                      }
                    },
                    "endpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "An array of objects that represent the endpoints in the Traffic Manager profile. {name: string, target: string, endpointStatus: string, endpointLocation: string}"
                      }
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "trafficManagerEndpoints",
                        "count": "[length(parameters('endpoints'))]"
                      },
                      "condition": "[not(empty(parameters('endpoints')[copyIndex()]))]",
                      "type": "Microsoft.Network/trafficmanagerprofiles/ExternalEndpoints",
                      "apiVersion": "2018-08-01",
                      "name": "[format('{0}/{1}', parameters('trafficManagerName'), parameters('endpoints')[copyIndex()].name)]",
                      "properties": {
                        "target": "[parameters('endpoints')[copyIndex()].target]",
                        "endpointStatus": "[if(contains(parameters('endpoints')[copyIndex()], 'endpointStatus'), parameters('endpoints')[copyIndex()].endpointStatus, 'Enabled')]",
                        "endpointLocation": "[parameters('endpoints')[copyIndex()].endpointLocation]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('publicIp-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name)))]"
              ]
            },
            {
              "condition": "[and(parameters('assignRole'), variables('enableKeyVault'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('secrets-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('keyVault-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))), '2022-09-01').outputs.name.value]"
                  },
                  "secrets": {
                    "value": [
                      {
                        "secretName": "[parameters('storageSecretName')]",
                        "secretValue": "[if(equals(parameters('newOrExistingStorageAccount'), 'new'), reference(resourceId('Microsoft.Resources/deployments', format('storageAccount-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))), '2022-09-01').outputs.blobStorageConnectionString.value, parameters('storageAccountSecret'))]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "7459629157400148616"
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies the name of the key vault."
                      }
                    },
                    "secrets": {
                      "type": "array",
                      "metadata": {
                        "description": "Specifies the name of the secret that you want to create."
                      }
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "secret",
                        "count": "[length(parameters('secrets'))]"
                      },
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secrets')[copyIndex()].secretName)]",
                      "properties": {
                        "value": "[parameters('secrets')[copyIndex()].secretValue]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('keyVault-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name)))]",
                "[resourceId('Microsoft.Resources/deployments', format('storageAccount-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name)))]"
              ]
            }
          ],
          "outputs": {
            "keyVaultName": {
              "type": "string",
              "value": "[if(variables('enableKeyVault'), reference(resourceId('Microsoft.Resources/deployments', format('keyVault-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))), '2022-09-01').outputs.name.value, '')]"
            },
            "blobStorageConnectionString": {
              "type": "string",
              "value": "[if(equals(parameters('newOrExistingStorageAccount'), 'new'), reference(resourceId('Microsoft.Resources/deployments', format('storageAccount-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))), '2022-09-01').outputs.blobStorageConnectionString.value, '')]"
            },
            "ipAddress": {
              "type": "string",
              "value": "[if(variables('enablePublicIP'), reference(resourceId('Microsoft.Resources/deployments', format('publicIp-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))), '2022-09-01').outputs.ipAddress.value, '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('logAnalytics-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name)))]",
        "[resourceId('Microsoft.Resources/deployments', format('trafficManager-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name)))]"
      ]
    },
    {
      "copy": {
        "name": "kvCert",
        "count": "[length(variables('locationSpecs'))]"
      },
      "condition": "[and(parameters('assignRole'), parameters('enableCert'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('akvCert-{0}', variables('locationSpecs')[copyIndex()].location)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "akvName": {
            "value": "[take(format('{0}-{1}', variables('locationSpecs')[copyIndex()].location, parameters('keyVaultName')), 24)]"
          },
          "location": {
            "value": "[variables('locationSpecs')[copyIndex()].location]"
          },
          "certificateNames": {
            "value": [
              "[parameters('certificateName')]",
              "[variables('locationSpecs')[copyIndex()].locationCertName]"
            ]
          },
          "certificateCommonNames": {
            "value": [
              "[variables('fullHostname')]",
              "[variables('locationSpecs')[copyIndex()].fullLocationHostName]"
            ]
          },
          "issuerName": {
            "value": "[parameters('certificateIssuer')]"
          },
          "issuerProvider": {
            "value": "[parameters('issuerProvider')]"
          },
          "useExistingManagedIdentity": {
            "value": "[parameters('useExistingManagedIdentity')]"
          },
          "managedIdentityName": {
            "value": "[format('{0}{1}', parameters('managedIdentityPrefix'), variables('locationSpecs')[copyIndex()].location)]"
          },
          "rbacRolesNeededOnKV": {
            "value": "00482a5a-887f-4fb3-b363-3b7fe8e74483"
          },
          "isCrossTenant": {
            "value": "[parameters('isApp')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "12854429452572357298"
            }
          },
          "parameters": {
            "akvName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Key Vault"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location to deploy the resources to"
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "How the deployment script should be forced to execute"
              }
            },
            "rbacRolesNeededOnKV": {
              "type": "string",
              "defaultValue": "a4417e6f-fecd-4de8-b567-7b0420556985",
              "metadata": {
                "description": "The RoleDefinitionId required for the DeploymentScript resource to interact with KeyVault"
              }
            },
            "useExistingManagedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Does the Managed Identity already exists, or should be created"
              }
            },
            "managedIdentityName": {
              "type": "string",
              "defaultValue": "[format('id-KeyVaultCertificateCreator-{0}', parameters('location'))]",
              "metadata": {
                "description": "Name of the Managed Identity resource"
              }
            },
            "existingManagedIdentitySubId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "For an existing Managed Identity, the Subscription Id it is located in"
              }
            },
            "existingManagedIdentityResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "For an existing Managed Identity, the Resource Group it is located in"
              }
            },
            "certificateNames": {
              "type": "array",
              "metadata": {
                "description": "The names of the certificate to create. Use when creating many certificates."
              }
            },
            "certificateCommonNames": {
              "type": "array",
              "defaultValue": "[parameters('certificateNames')]",
              "metadata": {
                "description": "The common names of the certificate to create. Use when creating many certificates."
              }
            },
            "initialScriptDelay": {
              "type": "string",
              "defaultValue": "0",
              "metadata": {
                "description": "A delay before the script import operation starts. Primarily to allow Azure AAD Role Assignments to propagate"
              }
            },
            "cleanupPreference": {
              "type": "string",
              "defaultValue": "OnSuccess",
              "metadata": {
                "description": "When the script resource is cleaned up"
              },
              "allowedValues": [
                "OnSuccess",
                "OnExpiration",
                "Always"
              ]
            },
            "issuerName": {
              "type": "string",
              "defaultValue": "Self",
              "metadata": {
                "description": "Self, or user defined {IssuerName} for certificate signing"
              }
            },
            "issuerProvider": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Certificate Issuer Provider, DigiCert, GlobalSign, or internal options may be used."
              }
            },
            "accountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Account ID of Certificate Issuer Account"
              }
            },
            "issuerPassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Password of Certificate Issuer Account"
              }
            },
            "organizationId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Organization ID of Certificate Issuer Account"
              }
            },
            "isCrossTenant": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Override this parameter if using this in cross tenant scenarios"
              }
            }
          },
          "variables": {
            "$fxv#0": "#!/bin/bash\nset -e\n\necho \"Waiting on Identity RBAC replication ($initialDelay)\"\nsleep $initialDelay\n\n#Retry loop to catch errors (usually RBAC delays)\nretryLoopCount=0\nuntil [ $retryLoopCount -ge $retryMax ]\ndo\n    echo \"Creating AKV Cert $certName with CN $certCommonName (attempt $retryLoopCount)...\"\n\n    if [ -z \"$issuerName\" ] || [ -z \"$issuerProvider\" ]; then\n        policy=$(az keyvault certificate get-default-policy \\\n            | sed -e s/CN=CLIGetDefaultPolicy/CN=${certCommonName}/g \\\n            | sed -e s/\\\"name\\\":\\ \\\"Self\\\"/\\\"name\\\":\\ \\\"${issuerName}\\\"/g )\n    else\n      if [ \"$issuerProvider\" == \"DigiCert\" ] || [ \"$issuerProvider\" == \"GlobalCert\"]; then\n        az keyvault certificate issuer create \\\n          --vault-name $akvName \\\n          --issuer-name $issuerName \\\n          --provider-name $issuerProvider \\\n          --account-id $accountId \\\n          --password $issuerPassword \\\n          --organizatiion-id $organizationId\n      else\n        az keyvault certificate issuer create \\\n          --vault-name $akvName \\\n          --issuer-name $issuerName \\\n          --provider-name $issuerProvider\n      fi\n      policy=$(az keyvault certificate get-default-policy \\\n        | sed -e s/CN=CLIGetDefaultPolicy/CN=${certCommonName}/g )\n    fi\n    az keyvault certificate create \\\n        --vault-name $akvName \\\n        -n $certName \\\n        -p \"$policy\" \\\n        && break\n\n    sleep $retrySleep\n    retryLoopCount=$((retryLoopCount+1))\ndone\n\necho \"Getting Certificate $certName\";\nretryLoopCount=0\ncreatedCert=$(az keyvault certificate show -n $certName --vault-name $akvName -o json)\nwhile [ -z \"$(echo $createdCert | jq -r '.x509ThumbprintHex')\" ] && [ $retryLoopCount -lt $retryMax ]\ndo\n    echo \"Waiting for cert creation (attempt $retryLoopCount)...\"\n    sleep $retrySleep\n    createdCert=$(az keyvault certificate show -n $certName --vault-name $akvName -o json)\n    retryLoopCount=$((retryLoopCount+1))\ndone\n\nunversionedSecretId=$(echo $createdCert | jq -r \".sid\" | cut -d'/' -f-5) # remove the version from the url;\njsonOutputString=$(echo $createdCert | jq --arg usid $unversionedSecretId '{name: .name ,certSecretId: {versioned: .sid, unversioned: $usid }, thumbprint: .x509Thumbprint, thumbprintHex: .x509ThumbprintHex}')\necho $jsonOutputString > $AZ_SCRIPTS_OUTPUT_PATH\n",
            "delegatedManagedIdentityResourceId": "[if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]"
          },
          "resources": [
            {
              "condition": "[not(parameters('useExistingManagedIdentity'))]",
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('managedIdentityName')]",
              "location": "[parameters('location')]",
              "metadata": {
                "description": "A new managed identity that will be created in this Resource Group, this is the default option"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('akvName'))]",
              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('akvName')), parameters('rbacRolesNeededOnKV'), parameters('managedIdentityName'), string(parameters('useExistingManagedIdentity')))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('rbacRolesNeededOnKV'))]",
                "principalId": "[if(parameters('useExistingManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId)]",
                "principalType": "ServicePrincipal",
                "delegatedManagedIdentityResourceId": "[if(parameters('isCrossTenant'), variables('delegatedManagedIdentityResourceId'), null())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
              ]
            },
            {
              "copy": {
                "name": "createImportCerts",
                "count": "[length(parameters('certificateNames'))]"
              },
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[format('AKV-Cert-{0}-{1}', parameters('akvName'), replace(replace(parameters('certificateNames')[copyIndex()], ':', ''), '/', '-'))]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]": {}
                }
              },
              "kind": "AzureCLI",
              "properties": {
                "forceUpdateTag": "[parameters('forceUpdateTag')]",
                "azCliVersion": "2.35.0",
                "timeout": "PT10M",
                "retentionInterval": "P1D",
                "environmentVariables": [
                  {
                    "name": "akvName",
                    "value": "[parameters('akvName')]"
                  },
                  {
                    "name": "certName",
                    "value": "[parameters('certificateNames')[copyIndex()]]"
                  },
                  {
                    "name": "certCommonName",
                    "value": "[parameters('certificateCommonNames')[copyIndex()]]"
                  },
                  {
                    "name": "initialDelay",
                    "value": "[parameters('initialScriptDelay')]"
                  },
                  {
                    "name": "issuerName",
                    "value": "[parameters('issuerName')]"
                  },
                  {
                    "name": "issuerProvider",
                    "value": "[parameters('issuerProvider')]"
                  },
                  {
                    "name": "retryMax",
                    "value": "10"
                  },
                  {
                    "name": "retrySleep",
                    "value": "5s"
                  },
                  {
                    "name": "accountId",
                    "value": "[parameters('accountId')]"
                  },
                  {
                    "name": "issuerPassword",
                    "secureValue": "[parameters('issuerPassword')]"
                  },
                  {
                    "name": "organizationId",
                    "value": "[parameters('organizationId')]"
                  }
                ],
                "scriptContent": "[variables('$fxv#0')]",
                "cleanupPreference": "[parameters('cleanupPreference')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
                "[extensionResourceId(resourceId('Microsoft.KeyVault/vaults', parameters('akvName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.KeyVault/vaults', parameters('akvName')), parameters('rbacRolesNeededOnKV'), parameters('managedIdentityName'), string(parameters('useExistingManagedIdentity'))))]"
              ]
            }
          ],
          "outputs": {
            "certificateNames": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('certificateNames'))]",
                "input": "[createArray(reference(resourceId('Microsoft.Resources/deploymentScripts', format('AKV-Cert-{0}-{1}', parameters('akvName'), replace(replace(parameters('certificateNames')[copyIndex()], ':', ''), '/', '-'))), '2020-10-01').outputs.name)]"
              },
              "metadata": {
                "description": "Certificate names"
              }
            },
            "certificateSecretIds": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('certificateNames'))]",
                "input": "[createArray(reference(resourceId('Microsoft.Resources/deploymentScripts', format('AKV-Cert-{0}-{1}', parameters('akvName'), replace(replace(parameters('certificateNames')[copyIndex()], ':', ''), '/', '-'))), '2020-10-01').outputs.certSecretId.versioned)]"
              },
              "metadata": {
                "description": "KeyVault secret ids to the created version"
              }
            },
            "certificateSecretIdUnversioneds": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('certificateNames'))]",
                "input": "[createArray(reference(resourceId('Microsoft.Resources/deploymentScripts', format('AKV-Cert-{0}-{1}', parameters('akvName'), replace(replace(parameters('certificateNames')[copyIndex()], ':', ''), '/', '-'))), '2020-10-01').outputs.certSecretId.unversioned)]"
              },
              "metadata": {
                "description": "KeyVault secret ids which uses the unversioned uri"
              }
            },
            "certificateThumbpints": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('certificateNames'))]",
                "input": "[createArray(reference(resourceId('Microsoft.Resources/deploymentScripts', format('AKV-Cert-{0}-{1}', parameters('akvName'), replace(replace(parameters('certificateNames')[copyIndex()], ':', ''), '/', '-'))), '2020-10-01').outputs.thumbprint)]"
              },
              "metadata": {
                "description": "Certificate Thumbprints"
              }
            },
            "certificateThumbprintHexs": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('certificateNames'))]",
                "input": "[createArray(reference(resourceId('Microsoft.Resources/deploymentScripts', format('AKV-Cert-{0}-{1}', parameters('akvName'), replace(replace(parameters('certificateNames')[copyIndex()], ':', ''), '/', '-'))), '2020-10-01').outputs.thumbprintHex)]"
              },
              "metadata": {
                "description": "Certificate Thumbprints (in hex)"
              }
            }
          }
        }
      },
      "dependsOn": [
        "allRegionalResources"
      ]
    },
    {
      "copy": {
        "name": "buildApp",
        "count": "[length(union(createArray(parameters('location')), parameters('secondaryLocations')))]"
      },
      "condition": "[and(and(parameters('assignRole'), parameters('epicEULA')), not(equals(parameters('workerServicePrincipalSecret'), '')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('build-app-{0}-{1}', union(createArray(parameters('location')), parameters('secondaryLocations'))[copyIndex()], uniqueString(resourceGroup().id, subscription().subscriptionId))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[take(format('{0}-{1}', union(createArray(parameters('location')), parameters('secondaryLocations'))[copyIndex()], parameters('keyVaultName')), 24)]"
          },
          "secrets": {
            "value": [
              {
                "secretName": "build-app-secret",
                "secretValue": "[parameters('workerServicePrincipalSecret')]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.2.56959",
              "templateHash": "7459629157400148616"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the key vault."
              }
            },
            "secrets": {
              "type": "array",
              "metadata": {
                "description": "Specifies the name of the secret that you want to create."
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "secret",
                "count": "[length(parameters('secrets'))]"
              },
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secrets')[copyIndex()].secretName)]",
              "properties": {
                "value": "[parameters('secrets')[copyIndex()].secretValue]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "allRegionalResources"
      ]
    },
    {
      "condition": "[equals(parameters('newOrExistingCosmosDB'), 'new')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('cosmosDB-{0}-key', uniqueString(parameters('location'), resourceGroup().id, deployment().name))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "secondaryLocations": {
            "value": "[parameters('secondaryLocations')]"
          },
          "name": {
            "value": "[parameters('cosmosDBName')]"
          },
          "newOrExisting": {
            "value": "[parameters('newOrExistingCosmosDB')]"
          },
          "cosmosDBRG": {
            "value": "[parameters('cosmosDBRG')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.2.56959",
              "templateHash": "2496851890439133874"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Deployment Location"
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "[format('cosmos-{0}', uniqueString(resourceGroup().id, parameters('location')))]"
            },
            "newOrExisting": {
              "type": "string",
              "defaultValue": "new",
              "allowedValues": [
                "new",
                "existing"
              ]
            },
            "maxStalenessPrefix": {
              "type": "int",
              "defaultValue": 100000,
              "maxValue": 2147483647,
              "minValue": 10,
              "metadata": {
                "description": "Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 2147483647. Multi Region: 100000 to 2147483647."
              }
            },
            "maxIntervalInSeconds": {
              "type": "int",
              "defaultValue": 300,
              "maxValue": 86400,
              "minValue": 5,
              "metadata": {
                "description": "Max lag time (minutes). Required for BoundedStaleness. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400."
              }
            },
            "defaultConsistencyLevel": {
              "type": "string",
              "defaultValue": "Session",
              "metadata": {
                "description": "The default consistency level of the Cosmos DB account."
              },
              "allowedValues": [
                "Eventual",
                "ConsistentPrefix",
                "Session",
                "BoundedStaleness",
                "Strong"
              ]
            },
            "systemManagedFailover": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable system managed failover for regions"
              }
            },
            "secondaryLocations": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "array of region objects or regions: [{locationName: string, failoverPriority: int, isZoneRedundant: bool}] or [region: string]"
              }
            },
            "enableMultipleWriteLocations": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Multi-region writes capability allows you to take advantage of the provisioned throughput for your databases and containers across the globe."
              }
            },
            "EnableServerless": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable Serverless for consumption-based usage."
              }
            },
            "isZoneRedundant": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Toggle to enable or disable zone redudance."
              }
            },
            "cosmosDBRG": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Cosmos DB Resource Group. Used if Cosmos DB is in a different resource group."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "secondaryRegions",
                "count": "[length(parameters('secondaryLocations'))]",
                "input": {
                  "locationName": "[if(contains(parameters('secondaryLocations')[copyIndex('secondaryRegions')], 'locationName'), parameters('secondaryLocations')[copyIndex('secondaryRegions')].locationName, parameters('secondaryLocations')[copyIndex('secondaryRegions')])]",
                  "failoverPriority": "[if(contains(parameters('secondaryLocations')[copyIndex('secondaryRegions')], 'failoverPriority'), parameters('secondaryLocations')[copyIndex('secondaryRegions')].failoverPriority, add(copyIndex('secondaryRegions'), 1))]",
                  "isZoneRedundant": "[if(contains(parameters('secondaryLocations')[copyIndex('secondaryRegions')], 'isZoneRedundant'), parameters('secondaryLocations')[copyIndex('secondaryRegions')].isZoneRedundant, parameters('isZoneRedundant'))]"
                }
              },
              {
                "name": "unwind",
                "count": "[length(variables('locations'))]",
                "input": "[format('{0}-{1}.cassandra.cosmos.azure.com', toLower(parameters('name')), variables('locations')[copyIndex('unwind')].locationName)]"
              }
            ],
            "consistencyPolicy": {
              "Eventual": {
                "defaultConsistencyLevel": "Eventual"
              },
              "ConsistentPrefix": {
                "defaultConsistencyLevel": "ConsistentPrefix"
              },
              "Session": {
                "defaultConsistencyLevel": "Session"
              },
              "BoundedStaleness": {
                "defaultConsistencyLevel": "BoundedStaleness",
                "maxStalenessPrefix": "[parameters('maxStalenessPrefix')]",
                "maxIntervalInSeconds": "[parameters('maxIntervalInSeconds')]"
              },
              "Strong": {
                "defaultConsistencyLevel": "Strong"
              }
            },
            "locations": "[union(createArray(createObject('locationName', parameters('location'), 'failoverPriority', 0, 'isZoneRedundant', parameters('isZoneRedundant'))), variables('secondaryRegions'))]",
            "locationString": "[replace(substring(string(variables('unwind')), 1, sub(length(string(variables('unwind'))), 2)), '\"', '')]"
          },
          "resources": [
            {
              "condition": "[equals(parameters('newOrExisting'), 'new')]",
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2022-05-15",
              "name": "[toLower(parameters('name'))]",
              "location": "[parameters('location')]",
              "kind": "GlobalDocumentDB",
              "properties": {
                "consistencyPolicy": "[variables('consistencyPolicy')[parameters('defaultConsistencyLevel')]]",
                "locations": "[variables('locations')]",
                "databaseAccountOfferType": "Standard",
                "enableAutomaticFailover": "[parameters('systemManagedFailover')]",
                "enableMultipleWriteLocations": "[parameters('enableMultipleWriteLocations')]",
                "capabilities": "[union(createArray(createObject('name', 'EnableCassandra')), if(parameters('EnableServerless'), createArray(createObject('name', 'EnableServerless')), createArray()))]"
              }
            }
          ],
          "outputs": {
            "cassandraConnectionString": {
              "type": "string",
              "metadata": {
                "description": "Key to connect with Cosmos DB"
              },
              "value": "[format('Contact Points={0}.cassandra.cosmos.azure.com,{1};Username={2};Password={3};Port=10350', toLower(parameters('name')), variables('locationString'), toLower(parameters('name')), if(equals(parameters('newOrExisting'), 'new'), listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('name'))), '2022-05-15'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('cosmosDBRG')), 'Microsoft.DocumentDB/databaseAccounts', toLower(parameters('name'))), '2022-05-15')).primaryMasterKey)]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "allRegionalResources"
      ]
    },
    {
      "copy": {
        "name": "cassandraKeys",
        "count": "[length(union(createArray(parameters('location')), parameters('secondaryLocations')))]"
      },
      "condition": "[and(parameters('assignRole'), parameters('epicEULA'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('cassandra-keys-{0}-{1}', union(createArray(parameters('location')), parameters('secondaryLocations'))[copyIndex()], uniqueString(resourceGroup().id, subscription().subscriptionId))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[take(format('{0}-{1}', union(createArray(parameters('location')), parameters('secondaryLocations'))[copyIndex()], parameters('keyVaultName')), 24)]"
          },
          "secrets": {
            "value": [
              {
                "secretName": "ddc-db-connection-string",
                "secretValue": "[if(equals(parameters('newOrExistingCosmosDB'), 'new'), reference(resourceId('Microsoft.Resources/deployments', format('cosmosDB-{0}-key', uniqueString(parameters('location'), resourceGroup().id, deployment().name))), '2022-09-01').outputs.cassandraConnectionString.value, parameters('cassandraConnectionString'))]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.2.56959",
              "templateHash": "7459629157400148616"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the key vault."
              }
            },
            "secrets": {
              "type": "array",
              "metadata": {
                "description": "Specifies the name of the secret that you want to create."
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "secret",
                "count": "[length(parameters('secrets'))]"
              },
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secrets')[copyIndex()].secretName)]",
              "properties": {
                "value": "[parameters('secrets')[copyIndex()].secretValue]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('cosmosDB-{0}-key', uniqueString(parameters('location'), resourceGroup().id, deployment().name)))]"
      ]
    },
    {
      "condition": "[and(parameters('assignRole'), parameters('epicEULA'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('setup-ddc-{0}', parameters('location'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aksName": {
            "value": "[parameters('aksName')]"
          },
          "locationSpecs": {
            "value": "[variables('locationSpecs')]"
          },
          "resourceGroupName": {
            "value": "[resourceGroup().name]"
          },
          "publicIpName": {
            "value": "[parameters('publicIpName')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "servicePrincipalClientID": {
            "value": "[parameters('servicePrincipalClientID')]"
          },
          "workerServicePrincipalClientID": {
            "value": "[parameters('workerServicePrincipalClientID')]"
          },
          "hostname": {
            "value": "[variables('fullHostname')]"
          },
          "certificateName": {
            "value": "[parameters('certificateName')]"
          },
          "azureTenantID": {
            "value": "[parameters('azureTenantID')]"
          },
          "keyVaultTenantID": {
            "value": "[parameters('keyVaultTenantID')]"
          },
          "loginTenantID": {
            "value": "[parameters('loginTenantID')]"
          },
          "CleanOldRefRecords": {
            "value": "[parameters('CleanOldRefRecords')]"
          },
          "CleanOldBlobs": {
            "value": "[parameters('CleanOldBlobs')]"
          },
          "helmVersion": {
            "value": "[parameters('helmVersion')]"
          },
          "helmChart": {
            "value": "[parameters('helmChart')]"
          },
          "helmName": {
            "value": "[parameters('helmName')]"
          },
          "helmNamespace": {
            "value": "[parameters('helmNamespace')]"
          },
          "siteName": {
            "value": "[parameters('siteName')]"
          },
          "imageVersion": {
            "value": "[parameters('imageVersion')]"
          },
          "useExistingManagedIdentity": {
            "value": true
          },
          "managedIdentityPrefix": {
            "value": "[parameters('managedIdentityPrefix')]"
          },
          "existingManagedIdentitySubId": {
            "value": "[parameters('existingManagedIdentitySubId')]"
          },
          "existingManagedIdentityResourceGroupName": {
            "value": "[parameters('existingManagedIdentityResourceGroupName')]"
          },
          "isApp": {
            "value": "[parameters('isApp')]"
          },
          "namespacesToReplicate": {
            "value": "[parameters('namespacesToReplicate')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.2.56959",
              "templateHash": "18077666509052538793"
            }
          },
          "parameters": {
            "aksName": {
              "type": "string"
            },
            "locationSpecs": {
              "type": "array",
              "metadata": {
                "description": "Deployment Location Specs"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]"
            },
            "publicIpName": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "servicePrincipalClientID": {
              "type": "string"
            },
            "workerServicePrincipalClientID": {
              "type": "string",
              "defaultValue": "[parameters('servicePrincipalClientID')]"
            },
            "hostname": {
              "type": "string"
            },
            "certificateName": {
              "type": "string"
            },
            "managedIdentityPrefix": {
              "type": "string",
              "defaultValue": "id-ddc-storage-"
            },
            "useExistingManagedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Does the Managed Identity already exists, or should be created"
              }
            },
            "existingManagedIdentitySubId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "For an existing Managed Identity, the Subscription Id it is located in"
              }
            },
            "existingManagedIdentityResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "For an existing Managed Identity, the Resource Group it is located in"
              }
            },
            "azureTenantID": {
              "type": "string",
              "defaultValue": "[subscription().tenantId]"
            },
            "keyVaultTenantID": {
              "type": "string",
              "defaultValue": "[subscription().tenantId]"
            },
            "loginTenantID": {
              "type": "string",
              "defaultValue": "[subscription().tenantId]"
            },
            "CleanOldRefRecords": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Delete old ref records no longer in use across the entire system"
              }
            },
            "CleanOldBlobs": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Delete old blobs that are no longer referenced by any ref - this runs in each region to cleanup that regions blob stores"
              }
            },
            "helmVersion": {
              "type": "string",
              "defaultValue": "latest"
            },
            "helmChart": {
              "type": "string"
            },
            "helmName": {
              "type": "string"
            },
            "helmNamespace": {
              "type": "string"
            },
            "siteName": {
              "type": "string"
            },
            "imageVersion": {
              "type": "string"
            },
            "isApp": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Set to false to deploy from as an ARM template for debugging"
              }
            },
            "namespacesToReplicate": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of ddc namespaces to replicate if there are secondary regions"
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "ddcSetup",
                "count": "[length(parameters('locationSpecs'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('helmInstall-ddc-{0}', uniqueString(parameters('locationSpecs')[copyIndex()].location, resourceGroup().id, deployment().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aksName": {
                    "value": "[parameters('aksName')]"
                  },
                  "location": {
                    "value": "[parameters('locationSpecs')[copyIndex()].location]"
                  },
                  "resourceGroupName": {
                    "value": "[parameters('resourceGroupName')]"
                  },
                  "keyVaultName": {
                    "value": "[take(format('{0}-{1}', parameters('locationSpecs')[copyIndex()].location, parameters('keyVaultName')), 24)]"
                  },
                  "servicePrincipalClientID": {
                    "value": "[parameters('servicePrincipalClientID')]"
                  },
                  "workerServicePrincipalClientID": {
                    "value": "[parameters('workerServicePrincipalClientID')]"
                  },
                  "hostname": {
                    "value": "[parameters('hostname')]"
                  },
                  "locationHostname": {
                    "value": "[parameters('locationSpecs')[copyIndex()].fullLocationHostName]"
                  },
                  "replicationSourceHostname": {
                    "value": "[parameters('locationSpecs')[copyIndex()].fullSourceLocationHostName]"
                  },
                  "certificateName": {
                    "value": "[parameters('certificateName')]"
                  },
                  "locationCertificateName": {
                    "value": "[parameters('locationSpecs')[copyIndex()].locationCertName]"
                  },
                  "keyVaultTenantID": {
                    "value": "[parameters('keyVaultTenantID')]"
                  },
                  "loginTenantID": {
                    "value": "[parameters('loginTenantID')]"
                  },
                  "enableWorker": {
                    "value": "[greater(length(parameters('locationSpecs')), 1)]"
                  },
                  "CleanOldRefRecords": "[if(equals(parameters('locationSpecs')[0].location, parameters('locationSpecs')[copyIndex()].location), createObject('value', parameters('CleanOldRefRecords')), createObject('value', false()))]",
                  "CleanOldBlobs": {
                    "value": "[parameters('CleanOldBlobs')]"
                  },
                  "namespacesToReplicate": {
                    "value": "[parameters('namespacesToReplicate')]"
                  },
                  "helmVersion": {
                    "value": "[parameters('helmVersion')]"
                  },
                  "helmChart": {
                    "value": "[parameters('helmChart')]"
                  },
                  "helmName": {
                    "value": "[parameters('helmName')]"
                  },
                  "helmNamespace": {
                    "value": "[parameters('helmNamespace')]"
                  },
                  "siteName": {
                    "value": "[parameters('siteName')]"
                  },
                  "imageVersion": {
                    "value": "[parameters('imageVersion')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "14928624156243513173"
                    }
                  },
                  "parameters": {
                    "aksName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "location": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "certificateName": {
                      "type": "string"
                    },
                    "locationCertificateName": {
                      "type": "string"
                    },
                    "servicePrincipalClientID": {
                      "type": "string"
                    },
                    "workerServicePrincipalClientID": {
                      "type": "string",
                      "defaultValue": "[parameters('servicePrincipalClientID')]"
                    },
                    "hostname": {
                      "type": "string",
                      "defaultValue": "deploy1.ddc-storage.gaming.azure.com"
                    },
                    "locationHostname": {
                      "type": "string"
                    },
                    "replicationSourceHostname": {
                      "type": "string"
                    },
                    "keyVaultTenantID": {
                      "type": "string",
                      "defaultValue": "[subscription().tenantId]"
                    },
                    "loginTenantID": {
                      "type": "string",
                      "defaultValue": "[subscription().tenantId]"
                    },
                    "helmVersion": {
                      "type": "string",
                      "defaultValue": "latest"
                    },
                    "helmChart": {
                      "type": "string"
                    },
                    "helmName": {
                      "type": "string"
                    },
                    "helmNamespace": {
                      "type": "string"
                    },
                    "siteName": {
                      "type": "string"
                    },
                    "imageVersion": {
                      "type": "string"
                    },
                    "enableWorker": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "CleanOldRefRecords": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "this should be enabled in one region - it will delete old ref records no longer in use across the entire system"
                      }
                    },
                    "CleanOldBlobs": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "this will delete old blobs that are no longer referenced by any ref - this runs in each region to cleanup that regions blob stores"
                      }
                    },
                    "namespacesToReplicate": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "restartPods": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "podRollMeSeed": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    },
                    "appInsightsKey": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "If this is non-empty, an open telemetry collector will be set up to send data to Application Insights"
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "scyllaValueSuffixes",
                        "count": "[length(items(variables('scyllaSpec')))]",
                        "input": "[format('{0}={1}', items(variables('scyllaSpec'))[copyIndex('scyllaValueSuffixes')].key, items(variables('scyllaSpec'))[copyIndex('scyllaValueSuffixes')].value)]"
                      },
                      {
                        "name": "sharedEnvPairs",
                        "count": "[length(items(variables('sharedEnv')))]",
                        "input": "[createArray(format('env[{0}].name={1}', copyIndex('sharedEnvPairs'), items(variables('sharedEnv'))[copyIndex('sharedEnvPairs')].key), format('env[{0}].value={1}', copyIndex('sharedEnvPairs'), items(variables('sharedEnv'))[copyIndex('sharedEnvPairs')].value))]"
                      },
                      {
                        "name": "replicatorValueArrays",
                        "count": "[length(parameters('namespacesToReplicate'))]",
                        "input": "[createArray(format('{0}[{1}].ReplicatorName=Replicator{2}', variables('replicatorPrefix'), copyIndex('replicatorValueArrays'), parameters('location')), format('{0}[{1}].Namespace={2}', variables('replicatorPrefix'), copyIndex('replicatorValueArrays'), parameters('namespacesToReplicate')[copyIndex('replicatorValueArrays')]), format('{0}[{1}].Version=Refs', variables('replicatorPrefix'), copyIndex('replicatorValueArrays')), format('{0}[{1}].ConnectionString={2}', variables('replicatorPrefix'), copyIndex('replicatorValueArrays'), parameters('replicationSourceHostname')))]"
                      },
                      {
                        "name": "workerScyllaValues",
                        "count": "[length(variables('scyllaValueSuffixes'))]",
                        "input": "[format('{0}.Scylla.{1}', variables('workerConfigPrefix'), variables('scyllaValueSuffixes')[copyIndex('workerScyllaValues')])]"
                      },
                      {
                        "name": "workerEnvValues",
                        "count": "[length(variables('sharedEnvValueSuffixes'))]",
                        "input": "[format('{0}.{1}', variables('workerPrefix'), variables('sharedEnvValueSuffixes')[copyIndex('workerEnvValues')])]"
                      },
                      {
                        "name": "otelEnvPairsSimple",
                        "count": "[length(items(variables('otelEnv')))]",
                        "input": "[createArray(format('env[{0}].name={1}', copyIndex('otelEnvPairsSimple'), items(variables('otelEnv'))[copyIndex('otelEnvPairsSimple')].key), format('env[{0}].value={1}', copyIndex('otelEnvPairsSimple'), items(variables('otelEnv'))[copyIndex('otelEnvPairsSimple')].value))]"
                      },
                      {
                        "name": "mainEnvValues",
                        "count": "[length(variables('mainEnvValueSuffixes'))]",
                        "input": "[format('{0}.{1}', variables('mainChartName'), variables('mainEnvValueSuffixes')[copyIndex('mainEnvValues')])]"
                      },
                      {
                        "name": "mainScyllaValues",
                        "count": "[length(variables('scyllaValueSuffixes'))]",
                        "input": "[format('{0}.Scylla.{1}', variables('mainConfigPrefix'), variables('scyllaValueSuffixes')[copyIndex('mainScyllaValues')])]"
                      }
                    ],
                    "locationMapping": {
                      "eastus": "East US",
                      "eastus2": "East US 2",
                      "westus": "West US",
                      "westus2": "West US 2",
                      "westus3": "West US 3",
                      "centralus": "Central US",
                      "northcentralus": "North Central US",
                      "southcentralus": "South Central US",
                      "northeurope": "North Europe",
                      "westeurope": "West Europe",
                      "southeastasia": "Southeast Asia",
                      "eastasia": "East Asia",
                      "japaneast": "Japan East",
                      "japanwest": "Japan West",
                      "australiaeast": "Australia East",
                      "australiasoutheast": "Australia Southeast",
                      "brazilsouth": "Brazil South",
                      "canadacentral": "Canada Central",
                      "canadaeast": "Canada East",
                      "centralindia": "Central India",
                      "southafricanorth": "South Africa North",
                      "uaenorth": "UAE North",
                      "koreacentral": "Korea Central",
                      "chinanorth3": "China North 3"
                    },
                    "loginDomain": "microsoftonline",
                    "serviceCreds": {
                      "OAuthClientId": "[parameters('workerServicePrincipalClientID')]",
                      "OAuthClientSecret": "[format('akv!{0}|build-app-secret', parameters('keyVaultName'))]",
                      "OAuthLoginUrl": "[format('{0}{1}/oauth2/v2.0/token', environment().authentication.loginEndpoint, parameters('loginTenantID'))]",
                      "OAuthScope": "[format('api://{0}/.default', parameters('servicePrincipalClientID'))]"
                    },
                    "global": {
                      "siteName": "[parameters('siteName')]",
                      "authMethod": "JWTBearer",
                      "jwtAuthority": "[format('https://login.{0}.com/{1}', variables('loginDomain'), parameters('loginTenantID'))]",
                      "jwtAudience": "[format('api://{0}', parameters('servicePrincipalClientID'))]",
                      "OverrideAppVersion": "[parameters('imageVersion')]",
                      "ServiceCredentials": "[variables('serviceCreds')]"
                    },
                    "ingress": {
                      "enabled": true,
                      "hostname": "[parameters('hostname')]",
                      "path": "/",
                      "pathType": "Prefix",
                      "port": 8080,
                      "tlsSecretName": "ingress-tls-csi",
                      "tlsCertName": "[parameters('certificateName')]"
                    },
                    "scyllaConnectionString": "[format('akv!{0}|ddc-db-connection-string', parameters('keyVaultName'))]",
                    "scyllaDataCenterName": "[variables('locationMapping')[parameters('location')]]",
                    "scyllaSpec": {
                      "ConnectionString": "[variables('scyllaConnectionString')]",
                      "LocalDatacenterName": "[variables('scyllaDataCenterName')]",
                      "LocalKeyspaceSuffix": "[parameters('location')]",
                      "UseAzureCosmosDB": true,
                      "InlineBlobMaxSize": 0
                    },
                    "storageConnectionString": "[format('akv!{0}|ddc-storage-connection-string', parameters('keyVaultName'))]",
                    "sharedEnv": {
                      "AZURE_CLIENT_ID": "$(FEDERATED_ID)",
                      "AZURE_TENANT_ID": "[parameters('keyVaultTenantID')]",
                      "AZURE_FEDERATED_TOKEN_FILE": "/var/run/secrets/tokens/azure-identity-token"
                    },
                    "sharedEnvValueSuffixes": "[flatten(variables('sharedEnvPairs'))]",
                    "mainChartName": "unreal-cloud-ddc",
                    "workerPrefix": "[format('{0}.worker', variables('mainChartName'))]",
                    "workerConfigPrefix": "[format('{0}.config', variables('workerPrefix'))]",
                    "replicationPrefix": "[format('{0}.Replication', variables('workerConfigPrefix'))]",
                    "replicationEnabledValue": "[format('{0}.Enabled=true', variables('replicationPrefix'))]",
                    "replicatorPrefix": "[format('{0}.Replicators', variables('replicationPrefix'))]",
                    "workerReplicatorValues": "[if(greater(length(parameters('namespacesToReplicate')), 0), concat(createArray(variables('replicationEnabledValue')), flatten(variables('replicatorValueArrays'))), createArray())]",
                    "workerOtherValues": [
                      "[format('{0}.enabled=true', variables('workerPrefix'))]",
                      "[format('{0}.Azure.ConnectionString={1}', variables('workerConfigPrefix'), variables('storageConnectionString'))]",
                      "[format('{0}.GC.CleanOldRefRecords={1}', variables('workerConfigPrefix'), parameters('CleanOldRefRecords'))]",
                      "[format('{0}.GC.CleanOldBlobs={1}', variables('workerConfigPrefix'), parameters('CleanOldBlobs'))]"
                    ],
                    "workerRestartValues": "[if(parameters('restartPods'), createArray(format('{0}.podAnnotations.rollme={1}', variables('workerPrefix'), uniqueString(parameters('podRollMeSeed')))), createArray())]",
                    "workerValues": "[if(parameters('enableWorker'), concat(variables('workerOtherValues'), variables('workerEnvValues'), variables('workerScyllaValues'), variables('workerReplicatorValues'), variables('workerRestartValues')), createArray())]",
                    "globalValues": [
                      "[format('global.auth.schemes.Bearer.jwtAuthority={0}', variables('global').jwtAuthority)]",
                      "[format('global.auth.schemes.Bearer.jwtAudience={0}', variables('global').jwtAudience)]",
                      "[format('global.siteName={0}', parameters('siteName'))]",
                      "[format('global.ServiceCredentials.OAuthClientId={0}', variables('serviceCreds').OAuthClientId)]",
                      "[format('global.ServiceCredentials.OAuthClientSecret={0}', variables('serviceCreds').OAuthClientSecret)]",
                      "[format('global.ServiceCredentials.OAuthLoginUrl={0}', variables('serviceCreds').OAuthLoginUrl)]",
                      "[format('global.ServiceCredentials.OAuthScope={0}', variables('serviceCreds').OAuthScope)]"
                    ],
                    "locationTlsSecretName": "[format('{0}-{1}', variables('ingress').tlsSecretName, parameters('location'))]",
                    "otelSamplingRatio": "0.01",
                    "otelEnv": {
                      "OTEL_SERVICE_NAME": "unreal-cloud-ddc",
                      "OTEL_SERVICE_VERSION": "1.0.0",
                      "OTEL_EXPORTER_OTLP_ENDPOINT": "http://$(HOST_IP):4317",
                      "OTEL_SAMPLING_RATIO": "[variables('otelSamplingRatio')]"
                    },
                    "otelEnvValueSuffixesSimple": "[flatten(variables('otelEnvPairsSimple'))]",
                    "lastEnvIndex": "[length(variables('otelEnvPairsSimple'))]",
                    "hostIPEnvValueSuffixes": [
                      "[format('env[{0}].name=HOST_IP', variables('lastEnvIndex'))]",
                      "[format('env[{0}].valueFrom.fieldRef.fieldPath=status.hostIP', variables('lastEnvIndex'))]"
                    ],
                    "useOtel": "[not(equals(parameters('appInsightsKey'), ''))]",
                    "otelEnvValueSuffixes": "[if(variables('useOtel'), concat(variables('otelEnvValueSuffixesSimple'), variables('hostIPEnvValueSuffixes')), createArray())]",
                    "mainEnvValueSuffixes": "[concat(variables('sharedEnvValueSuffixes'), variables('otelEnvValueSuffixes'))]",
                    "mainConfigPrefix": "[format('{0}.config', variables('mainChartName'))]",
                    "mainRestartValues": "[if(parameters('restartPods'), createArray(format('{0}.podAnnotations.rollme={1}', variables('mainChartName'), uniqueString(parameters('podRollMeSeed')))), createArray())]",
                    "ingressAksValues": [
                      "ingressAks.enabled=true",
                      "ingressAks.tlsEnabled=true",
                      "[format('ingressAks.hosts[0].name={0}', parameters('hostname'))]",
                      "[format('ingressAks.hosts[0].tlsSecretName={0}', variables('ingress').tlsSecretName)]",
                      "[format('ingressAks.hosts[1].name={0}', parameters('locationHostname'))]",
                      "[format('ingressAks.hosts[1].tlsSecretName={0}', variables('locationTlsSecretName'))]"
                    ],
                    "otelCollectorValues": "[if(variables('useOtel'), createArray(format('opentelemetry-collector.config.exporters.azuremonitor.instrumentation_key={0}', parameters('appInsightsKey'))), createArray())]"
                  },
                  "resources": [],
                  "outputs": {
                    "helmChart": {
                      "type": "object",
                      "value": {
                        "helmChart": "[parameters('helmChart')]",
                        "helmName": "[parameters('helmName')]",
                        "helmNamespace": "[parameters('helmNamespace')]",
                        "helmValues": "[replace(format('\"{0}\"', join(concat(variables('globalValues'), createArray('secretStore.enabled=true', format('secretStore.clientID={0}', createObject('enabled', true(), 'clientID', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('aksName'), parameters('location'))), '2018-11-30').clientId, 'keyVaultName', parameters('keyVaultName'), 'resourceGroup', parameters('resourceGroupName'), 'subscriptionID', subscription().subscriptionId, 'tenantID', parameters('keyVaultTenantID')).clientID), format('secretStore.keyvaultName={0}', createObject('enabled', true(), 'clientID', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('aksName'), parameters('location'))), '2018-11-30').clientId, 'keyVaultName', parameters('keyVaultName'), 'resourceGroup', parameters('resourceGroupName'), 'subscriptionID', subscription().subscriptionId, 'tenantID', parameters('keyVaultTenantID')).keyVaultName), format('secretStore.resourceGroup={0}', createObject('enabled', true(), 'clientID', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('aksName'), parameters('location'))), '2018-11-30').clientId, 'keyVaultName', parameters('keyVaultName'), 'resourceGroup', parameters('resourceGroupName'), 'subscriptionID', subscription().subscriptionId, 'tenantID', parameters('keyVaultTenantID')).resourceGroup), format('secretStore.subscriptionId={0}', createObject('enabled', true(), 'clientID', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('aksName'), parameters('location'))), '2018-11-30').clientId, 'keyVaultName', parameters('keyVaultName'), 'resourceGroup', parameters('resourceGroupName'), 'subscriptionID', subscription().subscriptionId, 'tenantID', parameters('keyVaultTenantID')).subscriptionID), format('secretStore.tenantId={0}', createObject('enabled', true(), 'clientID', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('aksName'), parameters('location'))), '2018-11-30').clientId, 'keyVaultName', parameters('keyVaultName'), 'resourceGroup', parameters('resourceGroupName'), 'subscriptionID', subscription().subscriptionId, 'tenantID', parameters('keyVaultTenantID')).tenantID), format('secretStore.tlsSecretName={0}', variables('ingress').tlsSecretName), format('secretStore.tlsCertName={0}', variables('ingress').tlsCertName), format('secretStore.extraHosts[0].tlsSecretName={0}', variables('locationTlsSecretName')), format('secretStore.extraHosts[0].tlsCertName={0}', parameters('locationCertificateName'))), concat(variables('mainEnvValues'), variables('mainScyllaValues'), createArray(format('{0}.Azure.ConnectionString={1}', variables('mainConfigPrefix'), variables('storageConnectionString')), format('{0}.GC.CleanOldBlobs=false', variables('mainConfigPrefix')), format('{0}.serviceAccount.annotations.azure\\.workload\\.identity/client-id={1}', variables('mainChartName'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('aksName'), parameters('location'))), '2018-11-30').clientId)), variables('mainRestartValues')), variables('workerValues'), variables('ingressAksValues'), variables('otelCollectorValues')), '\",\"')), '$(FEDERATED_ID)', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('aksName'), parameters('location'))), '2018-11-30').clientId)]",
                        "version": "[parameters('helmVersion')]"
                      }
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "configAKS",
                "count": "[length(parameters('locationSpecs'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('configAKS-{0}', uniqueString(parameters('locationSpecs')[copyIndex()].location, resourceGroup().id, deployment().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('locationSpecs')[copyIndex()].location]"
                  },
                  "aksName": {
                    "value": "[format('{0}-{1}', parameters('aksName'), take(parameters('locationSpecs')[copyIndex()].location, 8))]"
                  },
                  "additionalCharts": {
                    "value": [
                      "[reference(resourceId('Microsoft.Resources/deployments', format('helmInstall-ddc-{0}', uniqueString(parameters('locationSpecs')[copyIndex()].location, resourceGroup().id, deployment().name))), '2022-09-01').outputs.helmChart.value]"
                    ]
                  },
                  "staticIP": {
                    "value": "[format('{0}-{1}', parameters('publicIpName'), parameters('locationSpecs')[copyIndex()].location)]"
                  },
                  "azureTenantID": {
                    "value": "[parameters('azureTenantID')]"
                  },
                  "useExistingManagedIdentity": {
                    "value": "[parameters('useExistingManagedIdentity')]"
                  },
                  "managedIdentityName": {
                    "value": "[format('{0}{1}', parameters('managedIdentityPrefix'), parameters('locationSpecs')[copyIndex()].location)]"
                  },
                  "existingManagedIdentitySubId": {
                    "value": "[parameters('existingManagedIdentitySubId')]"
                  },
                  "existingManagedIdentityResourceGroupName": {
                    "value": "[parameters('existingManagedIdentityResourceGroupName')]"
                  },
                  "isApp": {
                    "value": "[parameters('isApp')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "1201883775772046451"
                    }
                  },
                  "parameters": {
                    "aksName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "staticIP": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "additionalCharts": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "enableWorkloadIdentity": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "enableSecretStore": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "enableIngress": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "enableLocalProvisioner": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "azureTenantID": {
                      "type": "string",
                      "defaultValue": "[subscription().tenantId]"
                    },
                    "managedIdentityName": {
                      "type": "string",
                      "defaultValue": "[format('id-ddc-storage-{0}', parameters('location'))]"
                    },
                    "useExistingManagedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Does the Managed Identity already exists, or should be created"
                      }
                    },
                    "existingManagedIdentitySubId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "For an existing Managed Identity, the Subscription Id it is located in"
                      }
                    },
                    "existingManagedIdentityResourceGroupName": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "For an existing Managed Identity, the Resource Group it is located in"
                      }
                    },
                    "isApp": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Set to false to deploy from as an ARM template for debugging"
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableWorkloadIdentity')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('helmInstallWorkloadID-{0}', uniqueString(parameters('aksName'), parameters('location'), resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "azureTenantID": {
                            "value": "[parameters('azureTenantID')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.16.2.56959",
                              "templateHash": "12185815586447393771"
                            }
                          },
                          "parameters": {
                            "azureTenantID": {
                              "type": "string",
                              "defaultValue": "[subscription().tenantId]"
                            }
                          },
                          "variables": {
                            "namespace": "azure-workload-identity-system",
                            "helmCharts": {
                              "helmRepo": "azure-workload-identity",
                              "helmRepoURL": "https://azure.github.io/azure-workload-identity/charts",
                              "helmChart": "azure-workload-identity/workload-identity-webhook",
                              "helmName": "workload-identity-webhook",
                              "helmNamespace": "[variables('namespace')]",
                              "helmValues": "[format('azureTenantID={0}', parameters('azureTenantID'))]"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "helmChart": {
                              "type": "object",
                              "value": "[variables('helmCharts')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[parameters('enableSecretStore')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('helmInstallSecretStore-{0}', uniqueString(parameters('aksName'), parameters('location'), resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.16.2.56959",
                              "templateHash": "2783441017032817756"
                            }
                          },
                          "parameters": {
                            "enableSync": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Enable the syncSecret setting for the CSI Driver"
                              }
                            },
                            "enableRotation": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Enable the secret rotation setting for the CSI Driver"
                              }
                            }
                          },
                          "variables": {
                            "helmRepo": "csi-secrets-store-provider-azure",
                            "helmRepoURL": "https://azure.github.io/secrets-store-csi-driver-provider-azure/charts",
                            "helmChart": "csi-secrets-store-provider-azure/csi-secrets-store-provider-azure",
                            "helmName": "csi",
                            "namespace": "kube-system",
                            "helmJson": {
                              "csi-secrets-store-provider-azure": {
                                "secrets-store-csi-driver": {
                                  "syncSecret": {
                                    "enabled": "[parameters('enableSync')]"
                                  },
                                  "enableSecretRotation": "[parameters('enableRotation')]"
                                }
                              }
                            },
                            "helmArgs": [
                              "[format('secrets-store-csi-driver.syncSecret.enabled={0}', variables('helmJson')[variables('helmRepo')]['secrets-store-csi-driver'].syncSecret.enabled)]",
                              "[format('secrets-store-csi-driver.enableSecretRotation={0}', variables('helmJson')[variables('helmRepo')]['secrets-store-csi-driver'].enableSecretRotation)]"
                            ],
                            "helmArgsString": "[replace(replace(string(variables('helmArgs')), '[', ''), ']', '')]",
                            "helmCharts": {
                              "helmRepo": "[variables('helmRepo')]",
                              "helmRepoURL": "[variables('helmRepoURL')]",
                              "helmChart": "[variables('helmChart')]",
                              "helmName": "[variables('helmName')]",
                              "helmNamespace": "[variables('namespace')]",
                              "helmValues": "[variables('helmArgsString')]",
                              "helmJson": "[variables('helmJson')]"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "helmChart": {
                              "type": "object",
                              "value": "[variables('helmCharts')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[parameters('enableIngress')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('helmInstallIngress-{0}', uniqueString(parameters('aksName'), parameters('location'), resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "staticIP": {
                            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('staticIP')), '2021-03-01').ipAddress]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.16.2.56959",
                              "templateHash": "14756851902743675277"
                            }
                          },
                          "parameters": {
                            "resourceGroupName": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Azure Resource Group"
                              }
                            },
                            "staticIP": {
                              "type": "string",
                              "metadata": {
                                "description": "The IP of the Azure Public IP Address"
                              }
                            }
                          },
                          "variables": {
                            "helmRepo": "ingress-nginx",
                            "helmRepoURL": "https://kubernetes.github.io/ingress-nginx",
                            "helmChart": "ingress-nginx/ingress-nginx",
                            "helmName": "ingress-nginx",
                            "namespace": "ingress-basic",
                            "helmArgs": [
                              "controller.replicaCount=2",
                              "controller.nodeSelector.kubernetes\\.io/os=linux",
                              "controller.nodeSelector.kubernetes\\.io/arch=amd64",
                              "controller.image.repository=mcr.microsoft.com/oss/kubernetes/ingress/nginx-ingress-controller",
                              "controller.image.tag=v1.0.4",
                              "controller.image.digest=null",
                              "controller.admissionWebhooks.patch.nodeSelector.kubernetes\\.io/os=linux",
                              "controller.admissionWebhooks.patch.nodeSelector.kubernetes\\.io/arch=amd64",
                              "controller.admissionWebhooks.patch.image.repository=mcr.microsoft.com/oss/kubernetes/ingress/kube-webhook-certgen",
                              "controller.admissionWebhooks.patch.image.tag=v1.1.1",
                              "controller.admissionWebhooks.patch.image.digest=null",
                              "controller.defaultBackend.nodeSelector.kubernetes\\.io/os=linux",
                              "controller.defaultBackend.nodeSelector.kubernetes\\.io/arch=amd64",
                              "controller.defaultBackend.image.repository=mcr.microsoft.com/oss/kubernetes/defaultbackend",
                              "controller.defaultBackend.image.tag=1.4",
                              "controller.defaultBackend.image.digest=null",
                              "controller.service.externalTrafficPolicy=Local",
                              "[format('controller.service.loadBalancerIP={0}', parameters('staticIP'))]",
                              "[format('controller.service.annotations.service\\.beta\\.kubernetes\\.io/azure-load-balancer-resource-group=\"{0}\"', parameters('resourceGroupName'))]"
                            ],
                            "helmStringArgs": [
                              "controller.labels.azure\\.workload\\.identity/use=true"
                            ],
                            "helmValues": "[format('\"{0}\"', join(variables('helmArgs'), '\",\"'))]",
                            "helmStringValues": "[format('\"{0}\"', join(variables('helmStringArgs'), '\",\"'))]",
                            "helmCharts": {
                              "helmRepo": "[variables('helmRepo')]",
                              "helmRepoURL": "[variables('helmRepoURL')]",
                              "helmChart": "[variables('helmChart')]",
                              "helmName": "[variables('helmName')]",
                              "helmNamespace": "[variables('namespace')]",
                              "helmValues": "[variables('helmValues')]",
                              "helmStringValues": "[variables('helmStringValues')]",
                              "version": "4.1.3"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "helmChart": {
                              "type": "object",
                              "value": "[variables('helmCharts')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[parameters('enableLocalProvisioner')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('helmInstallProvisioner-{0}', uniqueString(parameters('aksName'), parameters('location'), resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.16.2.56959",
                              "templateHash": "3819792504242199482"
                            }
                          },
                          "variables": {
                            "helmChart": "oci://tchordestoragecontainerregistry.azurecr.io/helm/tc-local-pv-provisioner",
                            "helmName": "tcpvprovisioner",
                            "helmNamespace": "tc-pv-provisioner",
                            "helmArgs": [
                              "localProvisioner.enabled=true"
                            ],
                            "helmArgsString": "[replace(replace(string(variables('helmArgs')), '[', ''), ']', '')]",
                            "helmCharts": {
                              "helmChart": "[variables('helmChart')]",
                              "helmName": "[variables('helmName')]",
                              "helmNamespace": "[variables('helmNamespace')]",
                              "helmValues": "[variables('helmArgsString')]",
                              "version": "0.1.0"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "helmChart": {
                              "type": "object",
                              "value": "[variables('helmCharts')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('helmInstallCombo-{0}', uniqueString(parameters('aksName'), parameters('location'), resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "aksName": {
                            "value": "[parameters('aksName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "helmCharts": {
                            "value": "[union(if(parameters('enableWorkloadIdentity'), createArray(reference(resourceId('Microsoft.Resources/deployments', format('helmInstallWorkloadID-{0}', uniqueString(parameters('aksName'), parameters('location'), resourceGroup().name))), '2022-09-01').outputs.helmChart.value), createArray()), if(parameters('enableIngress'), createArray(reference(resourceId('Microsoft.Resources/deployments', format('helmInstallIngress-{0}', uniqueString(parameters('aksName'), parameters('location'), resourceGroup().name))), '2022-09-01').outputs.helmChart.value), createArray()), if(parameters('enableSecretStore'), createArray(reference(resourceId('Microsoft.Resources/deployments', format('helmInstallSecretStore-{0}', uniqueString(parameters('aksName'), parameters('location'), resourceGroup().name))), '2022-09-01').outputs.helmChart.value), createArray()), if(parameters('enableLocalProvisioner'), createArray(reference(resourceId('Microsoft.Resources/deployments', format('helmInstallProvisioner-{0}', uniqueString(parameters('aksName'), parameters('location'), resourceGroup().name))), '2022-09-01').outputs.helmChart.value), createArray()), parameters('additionalCharts'))]"
                          },
                          "useExistingManagedIdentity": {
                            "value": "[parameters('useExistingManagedIdentity')]"
                          },
                          "managedIdentityName": {
                            "value": "[parameters('managedIdentityName')]"
                          },
                          "existingManagedIdentitySubId": {
                            "value": "[parameters('existingManagedIdentitySubId')]"
                          },
                          "existingManagedIdentityResourceGroupName": {
                            "value": "[parameters('existingManagedIdentityResourceGroupName')]"
                          },
                          "isApp": {
                            "value": "[parameters('isApp')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.16.2.56959",
                              "templateHash": "2665806766654980078"
                            }
                          },
                          "parameters": {
                            "aksName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Azure Kubernetes Service"
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location to deploy the resources to"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "[utcNow()]",
                              "metadata": {
                                "description": "How the deployment script should be forced to execute"
                              }
                            },
                            "useExistingManagedIdentity": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Does the Managed Identity already exists, or should be created"
                              }
                            },
                            "managedIdentityName": {
                              "type": "string",
                              "defaultValue": "[format('id-AksRun-{0}', parameters('location'))]",
                              "metadata": {
                                "description": "Name of the Managed Identity resource"
                              }
                            },
                            "existingManagedIdentitySubId": {
                              "type": "string",
                              "defaultValue": "[subscription().subscriptionId]",
                              "metadata": {
                                "description": "For an existing Managed Identity, the Subscription Id it is located in"
                              }
                            },
                            "existingManagedIdentityResourceGroupName": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]",
                              "metadata": {
                                "description": "For an existing Managed Identity, the Resource Group it is located in"
                              }
                            },
                            "cleanupPreference": {
                              "type": "string",
                              "defaultValue": "OnSuccess",
                              "metadata": {
                                "description": "When the script resource is cleaned up"
                              },
                              "allowedValues": [
                                "OnSuccess",
                                "OnExpiration",
                                "Always"
                              ]
                            },
                            "helmCharts": {
                              "type": "array",
                              "metadata": {
                                "description": "Helm Charts {helmChart: azure-marketplace/wordpress, helmName: my-wordpress, helmNamespace: wordpress, helmValues: array, helmRepo: <>, helmRepoURL: <>}"
                              }
                            },
                            "isApp": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Set to false to deploy from as an ARM template for debugging"
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "commands",
                                "count": "[length(parameters('helmCharts'))]",
                                "input": "[join(createArray(if(contains(parameters('helmCharts')[copyIndex('commands')], 'helmRepo'), format('helm repo add {0} {1} && helm repo update &&', parameters('helmCharts')[copyIndex('commands')].helmRepo, parameters('helmCharts')[copyIndex('commands')].helmRepoURL), ''), format('helm upgrade {0} {1} --install', parameters('helmCharts')[copyIndex('commands')].helmName, parameters('helmCharts')[copyIndex('commands')].helmChart), if(contains(parameters('helmCharts')[copyIndex('commands')], 'helmNamespace'), format('--create-namespace --namespace {0}', parameters('helmCharts')[copyIndex('commands')].helmNamespace), ''), if(contains(parameters('helmCharts')[copyIndex('commands')], 'helmValues'), format('--set {0}', parameters('helmCharts')[copyIndex('commands')].helmValues), ''), if(contains(parameters('helmCharts')[copyIndex('commands')], 'helmStringValues'), format('--set-string {0}', parameters('helmCharts')[copyIndex('commands')].helmStringValues), ''), if(contains(parameters('helmCharts')[copyIndex('commands')], 'version'), format('--version {0}', parameters('helmCharts')[copyIndex('commands')].version), ''), '|| exit 1'), ' ')]"
                              }
                            ],
                            "commandString": "[join(variables('commands'), '; ')]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('helmChartMultiInstall-{0}', uniqueString(parameters('aksName'), parameters('location'), resourceGroup().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "aksName": {
                                    "value": "[parameters('aksName')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "commands": {
                                    "value": [
                                      "[variables('commandString')]"
                                    ]
                                  },
                                  "forceUpdateTag": {
                                    "value": "[parameters('forceUpdateTag')]"
                                  },
                                  "useExistingManagedIdentity": {
                                    "value": "[parameters('useExistingManagedIdentity')]"
                                  },
                                  "managedIdentityName": {
                                    "value": "[parameters('managedIdentityName')]"
                                  },
                                  "existingManagedIdentitySubId": {
                                    "value": "[parameters('existingManagedIdentitySubId')]"
                                  },
                                  "existingManagedIdentityResourceGroupName": {
                                    "value": "[parameters('existingManagedIdentityResourceGroupName')]"
                                  },
                                  "cleanupPreference": {
                                    "value": "[parameters('cleanupPreference')]"
                                  },
                                  "isApp": {
                                    "value": "[parameters('isApp')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.16.2.56959",
                                      "templateHash": "10075265730642459492"
                                    }
                                  },
                                  "parameters": {
                                    "aksName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Azure Kubernetes Service"
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location to deploy the resources to"
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "[utcNow()]",
                                      "metadata": {
                                        "description": "How the deployment script should be forced to execute"
                                      }
                                    },
                                    "rbacRolesNeeded": {
                                      "type": "array",
                                      "defaultValue": [
                                        "b24988ac-6180-42a0-ab88-20f7382dd24c",
                                        "7f6c6a51-bcf8-42ba-9220-52d62157d7db"
                                      ],
                                      "metadata": {
                                        "description": "An array of Azure RoleIds that are required for the DeploymentScript resource"
                                      }
                                    },
                                    "useExistingManagedIdentity": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Does the Managed Identity already exists, or should be created"
                                      }
                                    },
                                    "managedIdentityName": {
                                      "type": "string",
                                      "defaultValue": "[format('id-AksRunCommandProxy-{0}', parameters('location'))]",
                                      "metadata": {
                                        "description": "Name of the Managed Identity resource"
                                      }
                                    },
                                    "existingManagedIdentitySubId": {
                                      "type": "string",
                                      "defaultValue": "[subscription().subscriptionId]",
                                      "metadata": {
                                        "description": "For an existing Managed Identity, the Subscription Id it is located in"
                                      }
                                    },
                                    "existingManagedIdentityResourceGroupName": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "For an existing Managed Identity, the Resource Group it is located in"
                                      }
                                    },
                                    "commands": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "An array of commands to run"
                                      }
                                    },
                                    "initialScriptDelay": {
                                      "type": "string",
                                      "defaultValue": "120s",
                                      "metadata": {
                                        "description": "A delay before the script import operation starts. Primarily to allow Azure AAD Role Assignments to propagate"
                                      }
                                    },
                                    "cleanupPreference": {
                                      "type": "string",
                                      "defaultValue": "OnSuccess",
                                      "metadata": {
                                        "description": "When the script resource is cleaned up"
                                      },
                                      "allowedValues": [
                                        "OnSuccess",
                                        "OnExpiration",
                                        "Always"
                                      ]
                                    },
                                    "isApp": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Set to false to deploy from as an ARM template for debugging"
                                      }
                                    }
                                  },
                                  "variables": {
                                    "delegatedManagedIdentityResourceId": "[if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]"
                                  },
                                  "resources": [
                                    {
                                      "condition": "[not(parameters('useExistingManagedIdentity'))]",
                                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                                      "apiVersion": "2018-11-30",
                                      "name": "[parameters('managedIdentityName')]",
                                      "location": "[parameters('location')]"
                                    },
                                    {
                                      "copy": {
                                        "name": "rbac",
                                        "count": "[length(parameters('rbacRolesNeeded'))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', parameters('aksName'))]",
                                      "name": "[guid(resourceId('Microsoft.ContainerService/managedClusters', parameters('aksName')), parameters('rbacRolesNeeded')[copyIndex()], if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
                                      "properties": {
                                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('rbacRolesNeeded')[copyIndex()])]",
                                        "principalId": "[if(parameters('useExistingManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId)]",
                                        "principalType": "ServicePrincipal",
                                        "delegatedManagedIdentityResourceId": "[if(parameters('isApp'), variables('delegatedManagedIdentityResourceId'), null())]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "runAksCommand",
                                        "count": "[length(parameters('commands'))]",
                                        "mode": "serial",
                                        "batchSize": 1
                                      },
                                      "type": "Microsoft.Resources/deploymentScripts",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('AKS-Run-{0}-{1}-{2}', parameters('aksName'), deployment().name, copyIndex())]",
                                      "location": "[parameters('location')]",
                                      "identity": {
                                        "type": "UserAssigned",
                                        "userAssignedIdentities": {
                                          "[format('{0}', if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]": {}
                                        }
                                      },
                                      "kind": "AzureCLI",
                                      "properties": {
                                        "forceUpdateTag": "[parameters('forceUpdateTag')]",
                                        "azCliVersion": "2.35.0",
                                        "timeout": "PT10M",
                                        "retentionInterval": "P1D",
                                        "environmentVariables": [
                                          {
                                            "name": "RG",
                                            "value": "[resourceGroup().name]"
                                          },
                                          {
                                            "name": "aksName",
                                            "value": "[parameters('aksName')]"
                                          },
                                          {
                                            "name": "command",
                                            "value": "[parameters('commands')[copyIndex()]]"
                                          },
                                          {
                                            "name": "initialDelay",
                                            "value": "[parameters('initialScriptDelay')]"
                                          },
                                          {
                                            "name": "loopIndex",
                                            "value": "[string(copyIndex())]"
                                          }
                                        ],
                                        "scriptContent": "      #!/bin/bash\n      set +H\n\n      if [ \"$loopIndex\" == \"0\" ] && [ \"$initialDelay\" != \"0\" ]\n      then\n        echo \"Waiting on RBAC replication ($initialDelay)\"\n        sleep $initialDelay\n\n        #Force RBAC refresh\n        az logout\n        az login --identity\n      fi\n\n      echo \"Sending command $command to AKS Cluster $aksName in $RG\"\n      cmdOut=$(az aks command invoke -g $RG -n $aksName -o json --command \"${command}\")\n      echo $cmdOut\n\n      jsonOutputString=$cmdOut\n      echo $jsonOutputString > $AZ_SCRIPTS_OUTPUT_PATH\n    ",
                                        "cleanupPreference": "[parameters('cleanupPreference')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
                                        "rbac"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "commandOutput": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Array of command output from each Deployment Script AKS run command"
                                      },
                                      "copy": {
                                        "count": "[length(parameters('commands'))]",
                                        "input": {
                                          "Index": "[copyIndex()]",
                                          "Name": "[format('AKS-Run-{0}-{1}-{2}', parameters('aksName'), deployment().name, copyIndex())]",
                                          "CommandOutput": "[reference(resourceId('Microsoft.Resources/deploymentScripts', format('AKS-Run-{0}-{1}-{2}', parameters('aksName'), deployment().name, copyIndex())), '2020-10-01').outputs]"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('helmInstallIngress-{0}', uniqueString(parameters('aksName'), parameters('location'), resourceGroup().name)))]",
                        "[resourceId('Microsoft.Resources/deployments', format('helmInstallProvisioner-{0}', uniqueString(parameters('aksName'), parameters('location'), resourceGroup().name)))]",
                        "[resourceId('Microsoft.Resources/deployments', format('helmInstallSecretStore-{0}', uniqueString(parameters('aksName'), parameters('location'), resourceGroup().name)))]",
                        "[resourceId('Microsoft.Resources/deployments', format('helmInstallWorkloadID-{0}', uniqueString(parameters('aksName'), parameters('location'), resourceGroup().name)))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('helmInstall-ddc-{0}', uniqueString(parameters('locationSpecs')[copyIndex()].location, resourceGroup().id, deployment().name)))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "cassandraKeys",
        "kvCert"
      ]
    },
    {
      "condition": "[variables('useDnsZone')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('dns-{0}', uniqueString(parameters('dnsZoneName'), resourceGroup().id, deployment().name))]",
      "resourceGroup": "[parameters('dnsZoneResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsZoneName": {
            "value": "[parameters('dnsZoneName')]"
          },
          "recordName": {
            "value": "[parameters('shortHostname')]"
          },
          "targetFQDN": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('trafficManager-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name))), '2022-09-01').outputs.fqdn.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.2.56959",
              "templateHash": "7638119490902041773"
            }
          },
          "parameters": {
            "dnsZoneName": {
              "type": "string",
              "metadata": {
                "description": "An existing DNS Zone resource name"
              }
            },
            "recordName": {
              "type": "string",
              "metadata": {
                "description": "Name of CNAME record to add to dnsZoneName"
              }
            },
            "targetFQDN": {
              "type": "string",
              "metadata": {
                "description": "Target FQDN for CNAME record"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/dnsZones/CNAME",
              "apiVersion": "2018-05-01",
              "name": "[format('{0}/{1}', parameters('dnsZoneName'), parameters('recordName'))]",
              "properties": {
                "TTL": 3600,
                "CNAMERecord": {
                  "cname": "[parameters('targetFQDN')]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "allRegionalResources",
        "[resourceId('Microsoft.Resources/deployments', format('trafficManager-{0}', uniqueString(parameters('location'), resourceGroup().id, deployment().name)))]"
      ]
    }
  ],
  "outputs": {
    "cosmosDBName": {
      "type": "string",
      "metadata": {
        "description": "Name of Cosmos DB resource"
      },
      "value": "[parameters('cosmosDBName')]"
    },
    "newOrExistingCosmosDB": {
      "type": "string",
      "metadata": {
        "description": "New or Existing Cosmos DB resource"
      },
      "value": "[parameters('newOrExistingCosmosDB')]"
    }
  }
}